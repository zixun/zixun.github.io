<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[子循(SubCycle)]]></title>
  <link href="http://zixun.github.io/atom.xml" rel="self"/>
  <link href="http://zixun.github.io/"/>
  <updated>2017-03-10T15:57:26+08:00</updated>
  <id>http://zixun.github.io/</id>
  <author>
    <name><![CDATA[陈奕龙]]></name>
    <email><![CDATA[chenyl.exe@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift APM大轮子-GodEye]]></title>
    <link href="http://zixun.github.io/blog/2017/03/10/swift-apmda-lun-zi-godeye/"/>
    <updated>2017-03-10T15:30:12+08:00</updated>
    <id>http://zixun.github.io/blog/2017/03/10/swift-apmda-lun-zi-godeye</id>
    <content type="html"><![CDATA[<h1>什么是GodEye</h1>

<p>什么是GodEye？这个问题可以让GodEye自己告诉我们。</p>

<!-- more -->


<p>打开GodEye后，我们可以看到第一个tab页有一个Terminal的入口，这个功能是用来输入接入方自己预置的指令的，当然GodEye有一个默认的指令<code>help</code>可以输出一小段GodEye的自我介绍以及接入方自己已经预置的指令列表：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/help.jpg" alt="hello world" /></p>

<p>由于在我们截图的demo里并没有配置预置指令，因此这里的Commands没有输出任何一个指令，当然这不是重点，重点是GodEye的自我介绍，我们可以看到这样一句话：</p>

<pre><code>Automaticly disply Log,Crash,Network,ANR,Leak,CPU,RAM,FPS,NetFlow,Folder and etc with one line of code. Just like God opened his eyes
</code></pre>

<p>翻译过来就是GodEye是一个可以通过一行代码来自动展示日志，崩溃，网络，卡顿，内存泄漏以及CPU，RAM,FPS,网络流量，文件目录等硬件信息的工具，就像上帝睁开了他的眼睛。</p>

<h2>如何打开</h2>

<p>在任何界面下三个手指上滑，或者点击GodEye的AssistiveButton即可</p>

<h2>特色</h2>

<p>功能丰富，一行代码接入，零代码入侵</p>

<p>线上包可完全不打入代码</p>

<h2>安装</h2>

<p>GodEye目前可以通过CocoaPods来安装，只需要将下面的代码加入到你的Podfile中即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="s1">&#39;GodEye&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，在我们的<code>application:didFinishLaunchingWithOptions</code>方法中通过一行代码即可接入:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GodEye</span><span class="o">.</span><span class="n">makeEye</span><span class="p">(</span><span class="ss">with</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">window!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，一行代码接入是一种默认配置的接入，读者也可以通过传入自己的<code>Configuration</code>来精细化配置各个细节，这里就不展开说了，感兴趣的可以看一下Configuration注释就好。</p>

<h1>GodEye提供的功能</h1>

<p>上一节我们简单的介绍了下GodEye，可见GodEye提供的功能很多，这一节我们以GodEye的界面为基础，简单介绍下GodEye能提供给我们什么样的功能</p>

<h2>Console</h2>

<p>打开GodEye后我们可以看到第一个Tab页的名字是Console，是的，这个tab下都是一些输出的控制台，和一个Terminal的输入控制台：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/console.jpg" alt="hello world" />
由图可见，在Console模块中我们可以查看日志，崩溃，网络， 卡顿，内存泄漏，以及一个输入指令的终端。</p>

<h3>Log</h3>

<p>第一个子模块就是Log，也就是日志，点击进入后可以看到如下日志列表：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/log.jpg" alt="hello world" /></p>

<p>Log模块可以自动记录ASL（Apple System Log）以及Log4G的日志，并按照顺序自动展示在该列表中，关于ASL以及Log4G的详细信息可以参看第一章节&mdash;日志监控</p>

<h3>Crash</h3>

<p>第二个子模块就是Crash，也就是崩溃模块，该模块可以全自动监控App中的<code>Uncatched Exception</code>崩溃以及底层Signal崩溃。</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/crash.jpg" alt="hello world" /></p>

<p>由图可见，我们不但可以看到崩溃的原因，还能看到崩溃的堆栈，极大的方便了我们debug。当然，这些信息只能在你崩溃后重新打开才能查看哦。</p>

<h3>Network</h3>

<p>第三个子模块就是Network，也就是网络请求和网络响应的监控，这个模块可以监控我们发出的网络请求各个字段以及对应的网络响应的各个字段。当然这些字段非常多，因此默认我们是折叠显示的：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/net_list.jpg" alt="hello world" /></p>

<p>折叠状态下，我们只能看到请求的URL。点击一下这个cell，我们就能展开这个cell，展开后我们可以看到各个有值的字段：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/net_detail.jpg" alt="hello world" /></p>

<h3>ANR</h3>

<p>第四个子模块就是ANR,Application Not Responsed，也就是应用不响应，平时我们叫它&mdash;卡顿。在我们日常使用中，经常会出现卡顿的现象，卡顿很难追踪，因为其偶然性以及原因复杂性都相对比较大。卡顿监控模块可以在发生卡顿时，记录所有的堆栈，方便追踪：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/anr_list.jpg" alt="hello world" /></p>

<p>当然上图只是折叠显示，折叠显示下只会展示卡顿时候的主线程堆栈，当然，一般卡顿的原因也都发生在主线程。当然，点击这个cell也能看到所有线程的堆栈：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/anr_detail.jpg" alt="hello world" /></p>

<h3>Leak</h3>

<p>第五个子模块是Leak模块，可以记录发生内存泄漏的对象，当出现内存泄漏的时候会将对象记录在这里。</p>

<h3>Terminal</h3>

<p>最后一个子模块就是终端模块，用户可以自定义指令，在App运行的任何地方任何时候都能输入你的指令，获得你想要的数据。当然，如果你忘了你配置过哪些指令，你也可以输入<code>help</code>指令，它会告诉你所有配置的指令:</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/terminal.jpg" alt="hello world" /></p>

<h2>Monitor</h2>

<p>第二个tab页是monitor，就是各种硬件实时指标的监控器：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/monitor.jpg" alt="hello world" /></p>

<p>在这里我们可以实时监控系统的CPU，自身应用的CPU，应用的内存使用，系统的内存使用率，帧率FPS,应用的网络流量，系统的网络流量。后续版本迭代还会加入图表的功能，到时点击一个指标的监控数据，就可以看到历史心跳图，或者饼状图，应该会比较酷炫。</p>

<h2>File</h2>

<p>第三个tab是File,在这里我们可以查看我们App的沙盒文件，以及.app的内部包文件，还有就是整个手机的根目录文件：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/file_list.jpg" alt="hello world" /></p>

<p>选择一个目录后就会拉起我们的文件夹浏览器，可以查看文件夹下所有的文件以及文件夹：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/file_detail.jpg" alt="hello world" /></p>

<h2>Setting</h2>

<p>最后一个tab是Setting，当前版本可以配置我们的一些开关，后续版本迭代我们还会加入很多新的实时配置的东西，比如各种监控的阈值：</p>

<p><img src="http://zixun.github.io/images/custom/post/swift-apm-godeye/setting.jpg" alt="hello world" /></p>

<h1>GodEye解决的痛点</h1>

<p>GodEye是一个APM，一个帮助解决开发和调试时候步骤多，成本大，不方便的工具集合，因此GodEye能解决的痛点比较多，也比较散。</p>

<p>上一节我们谈了GodEye的功能，这一节我们就来说说这些功能都解决了啥痛点。</p>

<h2>痛点</h2>

<h3>痛点1：查看日志需要连接Mac</h3>

<p>我们平时查看日志输出的时候，必须将我们的手机连接到Mac电脑，用Xcode来查看。而GodEye的日志监控功能，就可以实现直接在App内查看，方便省时，还可以对日志做类别区分。</p>

<h3>痛点2：Crash后需要Xcode查看堆栈</h3>

<p>日常开发中Crash难免，谁都不能保证自己开发的App一个Crash的问题都没有。若是在我们日常写代码Debug的阶段Crash的话还好，可以直接在Xcode的console里看到堆栈；麻烦的是在测试人员测试的时候遇到的问题，如果能够复现还好，我们可以按部就班将操作日志再次展现在我们的Xcode控制台上，而要是难以复现的bug，我们就需要将测试人员的手机拿过来，然后找到对应的<code>.dSYM</code>文件将一堆内存地址符号化成代码。</p>

<p>是不是非常复杂，GodEye的Crash监控模块就能解决这个问题，我们可以直接在手机上查看Crash堆栈，实时方便，珍爱生命。</p>

<h3>痛点3：测试网络需要Charles设代理</h3>

<p>Charles可以很方便的帮我们查看网络请求。如果读者对Charles不熟悉，可以看看巧神的&lt;iOS开发进阶>。当然，使用Charles也有不方便的时候，需要身边有一台电脑，需要设置代理。GodEye的网络监控模块就可以省去这个烦恼，直接在App内部查看网络请求和网络响应，非常方便。后续还会加入数据mock，以及实时修改数据等功能。</p>

<h3>痛点4：卡顿原因难以捕捉</h3>

<p>众所周知，在移动设备上开发应用，性能是每一个developer关心的问题。作为developer我们可以通过提高自身技术，提高代码质量来优化我们应用的性能。当然我们不一定能及时发现代码存在的性能问题，这时就需要有一个能够监控并及时告知我们应用中那些耗费性能导致应用卡顿的“Bug”。GodEye的卡顿监控模块就是为此而开发。</p>

<h3>痛点5：内存泄漏需要Instruments</h3>

<p>不容置疑，Instruments的功能非常全面也非常强大，Leak和Allcation模块也非常实用。但是Instruments我们并不是经常会去使用，而且Instruments也有很多不便，首先你得打开Allocations，然后，你得一个个场景去重复的操作，我们无法及时得知泄漏，得专门做一遍上述操作，十分繁琐。GodEye的内存泄漏模块可以实时反馈给你内存泄漏的对象，非常方便。</p>

<h3>痛点6：脱离Xcode就不能查看变量数据</h3>

<p>如果我们在脱离我们的Xcode的时候想像连着Xcode那样来po一个对象或者数据的话基本是不可能的，GodEye提供了一个输入控制台，使用者可以自定义好对应的指令，运行的时候随时输入即可得到对应的数据，当然这些指令没有Xcode那么强大，但是已经够用了。</p>

<h2>痛点7：无法得知硬件使用信息</h2>

<p>大家是否遇到过一些疑难杂症，比如应用出现一些很奇怪的现象，经过艰苦卓绝的Debug原来是因为内存爆了，好多ViewController收到了内存警告。要是我们能对我们的硬件做监控就好了，我们能实时的知道我们的iPhone系统的CPU使用率，内存的使用率，要是能知道我们自己的app使用了多少CPU，多少内存就更好了。对，GodEye的硬件监控模块就能告诉你这些硬件信息。</p>

<h3>痛点8：无法查看文件系统</h3>

<p>我们平时做一些I/O操作的时候其实对我们是很不直观的，我们可能加了个文件，也可能改了个文件，我们通过代码能知道是否成功，但是我们不能亲眼看到，他就放在那里。或者我们想看一下我们的图片是否放入了我们的bundle，都很不方便。GodEye的文件模块就能很好的解决这个问题，不但能看整个沙盒的内容，还能看<code>.app</code>内部的内容，当然，也能看整个手机的根目录。</p>

<h2>One More Thing</h2>

<p>以上8个痛点，无一不是步骤多，成本大，不方便。而GodEye提供的功能就是为了解决这8个痛点。后续也会将已有的功能做的更加晚上，探索发现一些新的功能。</p>

<p>能看到这里，说明你也将整本书看完了，再次感谢你的耐心，希望这本书能对你有所帮助。也希望你会喜欢GodEye。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GodEye之日志监控]]></title>
    <link href="http://zixun.github.io/blog/2017/03/07/godeyezhi-ri-zhi-jian-kong/"/>
    <updated>2017-03-07T16:27:04+08:00</updated>
    <id>http://zixun.github.io/blog/2017/03/07/godeyezhi-ri-zhi-jian-kong</id>
    <content type="html"><![CDATA[<p>日志几乎是我们每一个iOS开发者每一天都要打交道的东西，比如运行时想看一下某个变量的值，那就<code>NSLog()</code>一下;当然，在Swift语言下我们还有另外一种选择,那就是<code>print()</code>方法。都是帮助我们方便调试与分析的工具。</p>

<!-- more -->


<p>开源社区也为我们贡献了很多非常优秀的日志框架，比如OC中大名鼎鼎的<code>CocoaLumberjack</code>，有兴趣的同学可以移步<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">https://github.com/CocoaLumberjack/CocoaLumberjack</a></p>

<p>开源日志框架是为了我们方便极了日志而开发的，比如我们可以调用CocoaLumberjack的<code>DDLogInfo("Info")</code>来记录一个<code>Info</code>类型的日志，用<code>DDLogError("Error")</code>来记录一个<code>Error</code>类型的日志。不同的日志记录框架我们需要调用的API也不一样，但是他们都有一个共同的特点，就是到最后都会调用系统的<code>NSLog()</code>方法。</p>

<p>因此我们需要做日志全自动监控的话，可以从<code>NSLog()</code>方法入手。这里我们会分两方面来讲，因为在iOS上我们不单单可以用<code>NSLog()</code>来记录日志，在Swift语言下还可以用<code>print()</code>方法来记录我们的日志。这一章我们会先介绍如何选择和优化我们监控<code>NSLog()</code>日志的方案，然后比较<code>NSLog()</code>与<code>print()</code>的不同点。然后再介绍Swift下特有的<code>print()</code>方法的处理。</p>

<h1>0 前言</h1>

<p>该文章摘自笔者撰写的一本iOS技术书籍<a href="https://www.qingdan.us/product/25">iOS监控编程</a>。</p>

<p>这是一本介绍iOS监控编程的书籍,内容涉及日志监控，监控崩溃，监控网络，监控卡顿，监控硬件，内存泄漏监控等方面。所有的功能都是通过自行编程实现，而不是通过使用第三方工具。每个章节记录了功能的实现细节，以及笔者一路探索过来的心路历程。当然，笔者后续依旧会寻求与探索新的监控方向，一旦有所得都会更新到本书的章节中。</p>

<p>这本书是笔者的开源工具<a href="https://github.com/zixun/GodEye">GodEye</a>的产出物，GodEye能全自动，零代码入侵，一行代码接入来监控应用的日志，卡顿，崩溃，网络，内存泄漏，CPU以及内存使用率，帧率等信息。</p>

<p><img src="http://zixun.github.io/images/custom/post/2017-03-07-godeyezhi-ri-zhi-jian-kong/cover.jpg" alt="hello world" /></p>

<h1>1 监控NSLog日志</h1>

<p>该章节涉及到的开源库<code>ASLEye</code>,大家可以先通过<a href="https://github.com/zixun/ASLEye">https://github.com/zixun/ASLEye</a>下载下来，一遍对照开源代码一遍阅读该章节。</p>

<p>可能你在翻开该章节前已经有了自己的方案了，因为这道题并没有唯一解，我们只是要找出最优解。下面让我们来逐一分析监控NSLog日志的方案。</p>

<h2>自定义API</h2>

<p>可能你和我一样，第一个想到的就是模仿<code>CocoaLumberjack</code>，咱整一套自己的API，让大家都来调咱的API不完事了么，多省事。比如<code>LogEyeInfo("Info")</code>就是<code>Info</code>类型的日志，<code>LogEyeError("Error")</code>就是<code>Error</code>类型的日志。</p>

<p>哈哈，咱是省事了，但是接入咱日志监控的开发者不干了，或许他正在和CocoaLumberjack愉快的玩耍，你侬我侬，你突然让我全换了，你他妈的在逗我？</p>

<p><img src="http://zixun.github.io/images/custom/post/2017-03-07-godeyezhi-ri-zhi-jian-kong/%E4%BD%A0%E4%BB%96%E5%A6%88%E7%9A%84%E5%9C%A8%E9%80%97%E6%88%91.jpg" alt="hello world" /></p>

<p>的确，这样接入方的开发者的工作量就太大了，而且也和全自动记录日志沾不上边，不是我们的最佳方案，换！</p>

<br/>


<h2>NSLog宏</h2>

<p>相信大家这个时候也都想到了NSLog宏的方案。咱可以定义一个<code>NSLog</code>的宏，去覆盖掉系统的<code>NSLog</code>的方法。在咱的<code>NSLog</code>的宏里面去调用我们第一种方案中的自定义API就好。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define NSLog(frmt, ...) AppInfo(frmt, ##__VA_ARGS__)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用这招偷梁换柱的方法，我们就可以在我们的<code>AppInfo</code>里面撒欢的处理我们的日志啦，用户一调我们就知道，用户一调我们就知道，好开心啊。赶紧找我们的接入方开发者来接入。</p>

<p>“我不接!”</p>

<p>“为啥子哟？”</p>

<p>“因为我现在用的开源日志记录框架也有了一个<code>NSLog</code>宏，把你的接入了日志记录框架的<code>NSLog</code>宏会被你覆盖掉，也有可能你的宏会被他的宏覆盖掉，谁先加载谁被覆盖！”</p>

<p>“&hellip;&hellip;(握草泥马)”</p>

<p><img src="http://zixun.github.io/images/custom/post/2017-03-07-godeyezhi-ri-zhi-jian-kong/%E6%8F%A1%E8%8D%89%E6%B3%A5%E9%A9%AC.jpg" alt="hello world" /></p>

<p>看来，<code>NSLog</code>宏的方案虽然好，但是一旦出现另一个<code>NSLog</code>宏就会出现“一山不容二宏”，“宏和宏不可兼得”的现象。我们不能保证接入方的开发者们不会接入其他编写了<code>NSLog</code>宏的第三方库，也不能保证接入方的开发者自己不会写一个<code>NSLog</code>宏。由此可见，<code>NSLog</code>宏的方案虽好，但是存在易冲突，不可靠，不可控等问题。换！</p>

<h2>寻找新的方案</h2>

<p>现在，两个方案都被我们排除了，还有啥比这两个更好的方案可以用呢。如果脑海里暂时没有好的方案与想法，我们就应该祭出我们程序员的基本生存技能，问度娘。。。。。。不是，问Google！</p>

<p>首先，我们去搜索一下Apple关于<code>NSLog</code>的文档。我们会发现<code>NSLog</code>方法中调用的是<code>NSLogv</code>方法。Apple文档中对于<code>NSLogv</code>函数是这样写的<code>Logs an error message to the Apple System Log facility</code>(参见<a href="https://developer.apple.com/reference/foundation/1395074-nslogv?language=objc">https://developer.apple.com/reference/foundation/1395074-nslogv?language=objc</a>)。</p>

<p>这句话有两个信息我们需要重点关注下，一个就是<code>error message</code>,还有一个就是<code>Apple System Log</code>,为啥<code>NSLog</code>是记录错误信息的，而不是日志信息呢？<code>Apple System Log</code>又是个什么鬼？</p>

<p>不急，我们再搜索下<code>CocoaLumberjack</code>的文档，我们会发现<code>CocoaLumberjack</code>的文档说了这么两句话:</p>

<pre><code>NSLog does 2 things:
    It writes log messages to the Apple System Logging (asl) facility. This allows log messages to show up in Console.app.

    It also checks to see if the application's stderr stream is going to a terminal (such as when the application is being run via Xcode). If so it writes the log message to stderr (so that it shows up in the Xcode console).
</code></pre>

<p>参见<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/b1a3837366bc286ee24671ef1042b7214a8aa0ca/Documentation/Performance.md">https://github.com/CocoaLumberjack/CocoaLumberjack/blob/b1a3837366bc286ee24671ef1042b7214a8aa0ca/Documentation/Performance.md</a></p>

<p><code>CocoaLumberjack</code>的文档告诉我们，当我们写了一句<code>NSLog</code>的时候，他会做两件事情：1.把日志写到<code>Apple System Log</code>里面。2.把日志展示到Xcode的控制台上面。</p>

<p>两个文档都提到了<code>Apple System Log</code>，那这个<code>Apple System Log</code>到底是个什么鬼。其实<code>Apple System Log</code>可以理解为就是一个我们设备的日志数据库，这里存放了所有应用所有进程产生的日志。也就是说，不管在哪，只要你调用了<code>NSLog</code>,系统就会把它写到<code>Apple System Log</code>中。</p>

<p>那为啥<code>NSLog</code>是记录错误信息的，而不是日志信息呢？其实Apple设计<code>NSLog</code>的时候就是一个记录错误日志的API，不然他也不会把日志写到一个叫<code>Apple System Log</code>的数据库里面，要知道记录日志是一个高频发的操作，如果每条都放到数据库中，是一件很浪费性能的事情。所以我觉得应该叫<code>NSLogError</code>才更合适。</p>

<p><code>NSLog</code>耗性能的一个原因也是因为需要把日志数据写到<code>Apple System Log</code>数据库，所以大伙的App线上Release版本尽量不要写<code>NSLog</code>，不但耗性能，而且不安全。Swift的<code>print</code>方法就不会把日志写到数据库中。当然在Swift中并没有废弃掉<code>NSLog</code>方法，但是Swift对<code>NSLog</code>方法做了优化，只有在模拟器环境下才会将日志写入<code>Apple System Log</code>。</p>

<h2>Apple System Log</h2>

<p>OK，我们找到了我们的方案:<code>Apple System Log</code>。Apple为<code>Apple System Log</code>提供了一个framework供大家使用来对<code>Apple System Log</code>的数据进行操作。他就是<code>asl</code>,那下面我们就来试试怎么通过代码把<code>Apple System Log</code>的数据捞出来。</p>

<p>首先，我们需要把我们的<code>asl</code>模块import进来:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="n">asl</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们创建一个专门用来捞ASL的日志的类<code>ASLEye</code>,并且做个<code>Timer</code>定时器，定时拉取ASL的数据:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">public</span> <span class="k">class</span> <span class="nc">ASLEye</span><span class="p">:</span> <span class="no">NSObject</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">public</span> <span class="n">func</span> <span class="nb">open</span><span class="p">(</span><span class="n">with</span> <span class="ss">interval</span><span class="p">:</span><span class="no">TimeInterval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="no">Timer</span><span class="o">.</span><span class="n">scheduledTimer</span><span class="p">(</span><span class="ss">timeInterval</span><span class="p">:</span> <span class="n">interval</span><span class="p">,</span><span class="ss">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span><span class="ss">selector</span><span class="p">:</span> <span class="c1">#selector(ASLEye.pollingLogs),userInfo: nil,repeats: true)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">public</span> <span class="n">func</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">timer?</span><span class="o">.</span><span class="n">invalidate</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span> <span class="n">var</span> <span class="ss">timer</span><span class="p">:</span> <span class="no">Timer</span><span class="p">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，现在就让我们来实现<code>pollingLogs</code>方法，来拉取我们的数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@objc</span> <span class="kp">private</span> <span class="n">func</span> <span class="n">pollingLogs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span><span class="no">TODO</span>  <span class="err">调用拉取数据</span><span class="no">API</span><span class="err">，获得数据数组</span>
</span><span class='line'>    <span class="sr">//</span><span class="no">TODO</span>  <span class="err">判断数据数组是否为空</span>
</span><span class='line'>    <span class="sr">//</span><span class="no">TODO</span>  <span class="err">将数据数组回调给上层</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>咱先不着急<code>pollingLogs</code>方法的具体实现。大家可以和我一样先注释好方法要做的事情。</p>

<p>这里我们要先介绍下<code>asl</code>的api的特点。<code>asl</code>的api类似SQL语句，你可以往查询语句里面加参数来过滤数据，比如要查询当前App的日志的话，需要设置App的BundleID，当然，我们每次启动我们的App的时候都是不同的进程，所以我们还需要设置当前App的进程ID。因此我们可以编写一个<code>initQuery</code>的方法来生成我们的查询语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">initQuery</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">aslmsg</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="ss">query</span><span class="p">:</span> <span class="n">aslmsg</span> <span class="o">=</span> <span class="n">asl_new</span><span class="p">(</span><span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_TYPE_QUERY</span><span class="p">))</span>
</span><span class='line'>        <span class="sr">//se</span><span class="n">t</span> <span class="no">BundleIdentifier</span> <span class="n">to</span> <span class="no">ASL_KEY_FACILITY</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">bundleIdentifier</span> <span class="o">=</span> <span class="p">(</span><span class="no">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">bundleIdentifier!</span> <span class="n">as</span> <span class="no">NSString</span><span class="p">)</span><span class="o">.</span><span class="n">utf8String</span>
</span><span class='line'>        <span class="n">asl_set_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="no">ASL_KEY_FACILITY</span><span class="p">,</span> <span class="n">bundleIdentifier</span><span class="p">,</span> <span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_QUERY_OP_EQUAL</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//se</span><span class="n">t</span> <span class="n">pid</span> <span class="n">to</span> <span class="no">ASL_KEY_PID</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pid</span> <span class="o">=</span> <span class="no">NSString</span><span class="p">(</span><span class="nb">format</span><span class="p">:</span> <span class="s2">&quot;%d&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">())</span><span class="o">.</span><span class="n">cString</span><span class="p">(</span><span class="ss">using</span><span class="p">:</span> <span class="nb">String</span><span class="o">.</span><span class="n">Encoding</span><span class="o">.</span><span class="n">utf8</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</span><span class='line'>        <span class="n">asl_set_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="no">ASL_KEY_PID</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_QUERY_OP_NUMERIC</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们来编写拉取数据API，获得数据数组的API，这个API要做的事情就是调用<code>initQuery()</code>方法生成我们的查询语句，然后解析返回的response，将response解析成一个字符串的数组返回给调动着，咱就叫他<code>retrieveLogs()</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">retrieveLogs</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="nb">String</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">logs</span> <span class="o">=</span> <span class="o">[</span><span class="nb">String</span><span class="o">]</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="ss">query</span><span class="p">:</span> <span class="n">aslmsg</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">initQuery</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="ss">response</span><span class="p">:</span> <span class="n">aslresponse?</span> <span class="o">=</span> <span class="n">asl_search</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">response</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">logs</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="n">message</span> <span class="o">=</span> <span class="n">asl_next</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">message</span> <span class="o">!=</span> <span class="kp">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">log</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="ss">from</span><span class="p">:</span> <span class="n">message!</span><span class="p">)</span>
</span><span class='line'>            <span class="n">logs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">log</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="n">asl_next</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">asl_free</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="n">asl_free</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">logs</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">parserLog</span><span class="p">(</span><span class="n">from</span> <span class="ss">message</span><span class="p">:</span><span class="n">aslmsg</span><span class="p">)</span> <span class="o">-&gt;</span><span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">content</span> <span class="o">=</span> <span class="n">asl_get</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="no">ASL_KEY_MSG</span><span class="p">)</span><span class="o">!</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="ss">cString</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="ss">encoding</span><span class="p">:</span> <span class="nb">String</span><span class="o">.</span><span class="n">Encoding</span><span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好，现在我们让<code>pollingLogs()</code>来调用我们的<code>retrieveLogs()</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@objc</span> <span class="kp">private</span> <span class="n">func</span> <span class="n">pollingLogs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">logs</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">retrieveLogs</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">logs</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">delegate?</span><span class="o">.</span><span class="n">aslMonitor?</span><span class="p">(</span><span class="ss">aslMonitor</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">didMonitorLogs</span><span class="p">:</span> <span class="n">logs</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们的日志就能通过我们的delegate方法回调给上层了。当然在这之前我们需要编写一个我们这个delegate的<code>protocol</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@objc</span> <span class="kp">public</span> <span class="n">protocol</span> <span class="ss">ASLEyeDelegate</span><span class="p">:</span> <span class="k">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="vi">@objc</span> <span class="n">optional</span> <span class="n">func</span> <span class="n">aslEye</span><span class="p">(</span><span class="ss">aslEye</span><span class="p">:</span><span class="no">ASLEye</span><span class="p">,</span><span class="n">catchLogs</span> <span class="ss">logs</span><span class="p">:</span><span class="o">[</span><span class="nb">String</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>ASLEye</code>上添加一个delegate的变量:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="ss">delegate</span><span class="p">:</span> <span class="no">ASLEyeDelegate</span><span class="p">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，这个时候大家去调用NSLog会发现存在一个问题。比如我调用了下<code>NSLog("Hello")</code>,我们的日志监控每次轮询都会取到我们的日志数据，我们的delegate会一直回调，把<code>Hello</code>给上层。</p>

<p>会造成这样其实也不难理解，因为App System Log是一个数据库，按照咱现在的查询语句，每次插叙的时候当然会把当前App当前的日志全部返回给我们，所以，我们还需要设置一个&#8217;游标&#8217;，换句话说就是我们需要在我们的查询语句里加一个参数，将我们上次查到的最后一个日志的id给塞进去，然后查询大于这个ID的日志。</p>

<p>OK,首先，我们来设置一个变量<code>lastMessageID</code>，用来记录最后一次查到的日志ID：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">var</span> <span class="ss">lastMessageID</span><span class="p">:</span> <span class="no">Int32</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在我们的<code>initQuery()</code>方法里最后返回我们的query前将我们的<code>lastMessageID</code>给塞进去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">initQuery</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">aslmsg</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="ss">query</span><span class="p">:</span> <span class="n">aslmsg</span> <span class="o">=</span> <span class="n">asl_new</span><span class="p">(</span><span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_TYPE_QUERY</span><span class="p">))</span>
</span><span class='line'>        <span class="sr">//se</span><span class="n">t</span> <span class="no">BundleIdentifier</span> <span class="n">to</span> <span class="no">ASL_KEY_FACILITY</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">bundleIdentifier</span> <span class="o">=</span> <span class="p">(</span><span class="no">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">bundleIdentifier!</span> <span class="n">as</span> <span class="no">NSString</span><span class="p">)</span><span class="o">.</span><span class="n">utf8String</span>
</span><span class='line'>        <span class="n">asl_set_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="no">ASL_KEY_FACILITY</span><span class="p">,</span> <span class="n">bundleIdentifier</span><span class="p">,</span> <span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_QUERY_OP_EQUAL</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//se</span><span class="n">t</span> <span class="n">pid</span> <span class="n">to</span> <span class="no">ASL_KEY_PID</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pid</span> <span class="o">=</span> <span class="no">NSString</span><span class="p">(</span><span class="nb">format</span><span class="p">:</span> <span class="s2">&quot;%d&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">())</span><span class="o">.</span><span class="n">cString</span><span class="p">(</span><span class="ss">using</span><span class="p">:</span> <span class="nb">String</span><span class="o">.</span><span class="n">Encoding</span><span class="o">.</span><span class="n">utf8</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</span><span class='line'>        <span class="n">asl_set_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="no">ASL_KEY_PID</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_QUERY_OP_NUMERIC</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">lastMessageID</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">m</span> <span class="o">=</span> <span class="no">NSString</span><span class="p">(</span><span class="nb">format</span><span class="p">:</span> <span class="s2">&quot;%d&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">lastMessageID</span><span class="p">)</span><span class="o">.</span><span class="n">utf8String</span>
</span><span class='line'>            <span class="n">asl_set_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="no">ASL_KEY_MSG_ID</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="no">UInt32</span><span class="p">(</span><span class="no">ASL_QUERY_OP_GREATER</span> <span class="o">|</span> <span class="no">ASL_QUERY_OP_NUMERIC</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，我们需要在每次解析我们的日志的时候将我们的日志ID给记录下来放到<code>lastMessageID</code>中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">parserLog</span><span class="p">(</span><span class="n">from</span> <span class="ss">message</span><span class="p">:</span><span class="n">aslmsg</span><span class="p">)</span> <span class="o">-&gt;</span><span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">content</span> <span class="o">=</span> <span class="n">asl_get</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="no">ASL_KEY_MSG</span><span class="p">)</span><span class="o">!</span><span class="p">;</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">msg_id</span> <span class="o">=</span> <span class="n">asl_get</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="no">ASL_KEY_MSG_ID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">msg_id</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">lastMessageID</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="ss">cString</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="ss">encoding</span><span class="p">:</span> <span class="nb">String</span><span class="o">.</span><span class="n">Encoding</span><span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK,这样，我们就能够全自动的监控我们的日志啦。上层开发者还是按照他们的方式玩就好，我们都能拿到他们的日志。
该章节涉及到的开源库<code>ASLEye</code>有兴趣的同学可以移步<a href="https://github.com/zixun/ASLEye">https://github.com/zixun/ASLEye</a>查看。</p>

<br />


<br />


<h2>更好的方案</h2>

<p>通过ASL来监控NSLog日志虽然能很好的完成自动监控的功能，但是毕竟<code>Apple System Log</code>是一个数据库，每次做查询操作由于会产生I/0操作，所以会产生一定的性能消耗。虽然这点性能消耗在日常应用的运行时完全可以忽略不计，但是当我们在统计应用整个流程的CPU使用率的时候还是会造成一定的干扰，那有没有更好的方案呢？</p>

<p>当然有。那就是将<code>NSLog</code>方法给hook掉。不过当我们点开<code>NSLog</code>方法的时候可以发现这个API并不是一个Objective-C语言的方法，而是一个C语言包装的API。C语言的API当然不能用我们Runtime的Method Swizzle来替换，他并不会走OC的运行时。</p>

<p>不过方法总比问题多，Facebook有一个名字叫fishhook的开源库，就可以做到将我们的<code>Mach-O</code>的库的符号表重新绑定，因此应该也能将我们的<code>NSLog</code>重新绑定，重新绑定后就可以做我们的日志监控啦。</p>

<p>有兴趣的同学可以自己实验下，笔者也会在今后<code>GodEye</code>的更新迭代中探索替换该方案来实现全自动的日志监控。当然也会将实现原理编写成该书的一个章节提供给大家。</p>

<h1>1 监控print日志</h1>

<p>前一章节我们分析了<code>NSLog</code>日志的监控，不过接触过Swift语言的同学都知道,Swift中大家一般都是用<code>print</code>来记录日志。当然，Swift并没有将<code>NSLog</code>给废弃掉。</p>

<h2>NSLog In Swift</h2>

<p>当然，Swift中我们也可以用<code>NSLog</code>来做日志记录，但是Swift对<code>NSLog</code>做过优化。笔者发现Swift中调用<code>NSLog</code>方法，它并不会想Objective-C中调用<code>NSLog</code>方法那样将日志放入<code>Apple System Log</code>中，模拟器环境下除外。也就是说我们在真实环境下并不能通过<code>ALS</code>获取<code>NSLog</code>的日志信息。因此我们需要寻找其他的办法。</p>

<h2>自定义print方法</h2>

<p>我们来看看Swift中<code>print</code>方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">public</span> <span class="n">func</span> <span class="nb">print</span><span class="p">(</span><span class="n">_</span> <span class="ss">items</span><span class="p">:</span> <span class="no">Any</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="ss">separator</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="n">default</span><span class="p">,</span> <span class="ss">terminator</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="n">default</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>separator</code>的默认值是一个&#8221; &ldquo;（空格字符串）。<code>terminator</code>的默认值是&rdquo;\n&#8221;（回车符）。</p>

<p>我们自定义的<code>print</code>方法不能完全和Swift的一样,不然编译器会给你一个报错<code>Ambiguous use of 'print(_:separator:terminator:)'</code>,因为两个API一模一样，编译器就不知道去链接哪个API了。</p>

<p>不过我们可以把默认值去掉，只需要一个item参数就好：</p>

<br />




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">public</span> <span class="n">func</span> <span class="nb">print</span><span class="p">(</span><span class="n">_</span> <span class="ss">items</span><span class="p">:</span> <span class="no">Any</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span><span class="ss">TODO</span><span class="p">:</span> <span class="no">Custom</span> <span class="no">Actions</span>
</span><span class='line'>    <span class="no">Swift</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们只需要在使用print方法的swift文件中，import我们这个自定义api的库就好了。然后将<code>TODO: Custom Actions</code>中放入我们的日志监控操作即可。</p>

<h2>自定义日志框架</h2>

<p>自定义print方法固然不错，但是使用者很容易忘了import我们这个自定义api的库，Swift中也没有预加载的功能，因此使用者很容易忘记做import操作，导致监控不到。而且单独一个print方法无法优雅的区分日志的类型，比如log,warning,error等。更不能获取文件名，方法名等日志辅助信息。因此我们何尝不自定义一个轻量级的日志框架呢。</p>

<p>该日志框架大家可通过<a href="https://github.com/zixun/Log4G">https://github.com/zixun/Log4G</a>下载，文中由于篇幅的原因，只会列出关键代码，建议将开源源码下载后对照着源码查看，会更便于理解。</p>

<p>我们先来看一张<code>Log4G</code>的简要设计图：</p>

<p><img src="http://zixun.github.io/images/custom/post/2017-03-07-godeyezhi-ri-zhi-jian-kong/log4g_design.jpg" alt="hello world" /></p>

<p>从图上我们可以看出，我们对外有三个接口，分别是<code>log()</code>,<code>warning()</code>和<code>error()</code>。他们内部都会调用一个不公开的接口<code>record()</code>,当然在方法中会自动获取日志的文件（file），行数（line），方法名（function）以及线程（thread），然后传递给<code>record()</code>方法，<code>record()</code>方法内部所有的操作都在一个指定的queue中进行，可以防止多线程的问题。<code>record()</code>会做两件事，一个就是调用系统的<code>print()</code>函数，还有一个就是通知<code>Log4g</code>内部维护的delegate数组，告诉日志监听者们新的日志信息。</p>

<p>我们先来看看<code>log()</code>的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="n">record</span> <span class="n">a</span> <span class="n">log</span> <span class="n">type</span> <span class="n">message</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="o">-</span> <span class="ss">Parameters</span><span class="p">:</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">message</span><span class="p">:</span> <span class="n">log</span> <span class="n">message</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">file</span><span class="p">:</span> <span class="n">file</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">line</span><span class="p">:</span> <span class="n">line</span> <span class="n">number</span> <span class="n">at</span> <span class="n">file</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">function</span><span class="p">:</span> <span class="n">function</span> <span class="nb">name</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="nb">open</span> <span class="k">class</span> <span class="n">func</span> <span class="n">log</span><span class="p">(</span><span class="n">_</span> <span class="ss">message</span><span class="p">:</span> <span class="no">Any</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">file</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="c1">#file,</span>
</span><span class='line'>                    <span class="ss">line</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="c1">#line,</span>
</span><span class='line'>                    <span class="ss">function</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="c1">#function) {</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">record</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="o">.</span><span class="n">log</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">thread</span><span class="p">:</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;\(message)&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">file</span><span class="p">:</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">line</span><span class="p">:</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">function</span><span class="p">:</span> <span class="n">function</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们通过<code>#file</code>,<code>#line</code>,<code>#function</code>可以自动获取调用API时候的文件名，行数以及方法名，不需要调用者参与。然后通过<code>Thread.current</code>拿到当前线程，一并传递给<code>record</code>方法。这样调用者只需要传递日志即可，其他一切都是自动。</p>

<p><code>warning()</code>和<code>error()</code>原理一致，那我们来看看<code>record()</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="n">record</span> <span class="n">message</span> <span class="n">base</span> <span class="n">function</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="o">-</span> <span class="ss">Parameters</span><span class="p">:</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">type</span><span class="p">:</span> <span class="n">log</span> <span class="n">type</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">thread</span><span class="p">:</span> <span class="n">thread</span> <span class="n">which</span> <span class="n">log</span> <span class="n">the</span> <span class="n">messsage</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">message</span><span class="p">:</span> <span class="n">log</span> <span class="n">message</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">file</span><span class="p">:</span> <span class="n">file</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">line</span><span class="p">:</span> <span class="n">line</span> <span class="n">number</span> <span class="n">at</span> <span class="n">file</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span>   <span class="o">-</span> <span class="ss">function</span><span class="p">:</span> <span class="n">function</span> <span class="nb">name</span> <span class="n">which</span> <span class="n">call</span> <span class="n">the</span> <span class="n">api</span>
</span><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">record</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span><span class="no">Log4gType</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">thread</span><span class="p">:</span><span class="no">Thread</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">file</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">line</span><span class="p">:</span> <span class="no">Int</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">function</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">model</span> <span class="o">=</span> <span class="no">LogModel</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>                             <span class="ss">thread</span><span class="p">:</span> <span class="n">thread</span><span class="p">,</span>
</span><span class='line'>                             <span class="ss">message</span><span class="p">:</span> <span class="n">message</span><span class="p">,</span>
</span><span class='line'>                             <span class="ss">file</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="ss">of</span><span class="p">:</span> <span class="n">file</span><span class="p">),</span>
</span><span class='line'>                             <span class="ss">line</span><span class="p">:</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>                             <span class="ss">function</span><span class="p">:</span> <span class="n">function</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">delegate</span> <span class="k">in</span> <span class="nb">self</span><span class="o">.</span><span class="n">delegates</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delegate</span><span class="o">.</span><span class="n">delegate?</span><span class="o">.</span><span class="n">log4gDidRecord</span><span class="p">(</span><span class="ss">with</span><span class="p">:</span> <span class="n">model</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>record()</code>方法内部通过<code>self.queue.async{...}</code>将所有的操作都同步在一个统一的线程中，然后调用系统的<code>print()</code>方法并生成一个日志的model，告诉<code>Log4g</code>内部维护的delegate数组监听到的新的日志。这里涉及成delegate数组可以方便日志监听的扩展，<code>Log4g</code>顾名思义，就是<code>Log4GodEye</code>,就是设计给<code>GodEye</code>使用的日志记录框架，<code>GodEye</code>是delegate的一员，但是可能用户的App其他地方也需要监控日志，只要将其加入到delegate即可。</p>

<p>附<code>GodEye</code>开源地址：<a href="https://github.com/zixun/GodEye">https://github.com/zixun/GodEye</a>，<code>GodEye</code>是一个可以自动监控日志，崩溃，卡顿，网络，内存泄漏，沙盒文件，CPU,RAM，FPS,流量等信息的工具，功能丰富，just like god open his eye。</p>

<h2>delegate数组的坑</h2>

<p>在Objective-C中，我们将delegate放入一个数组中完全没有问题，因为<code>NSArray</code>不会强引用放进来的对象。但是Swift中的<code>Array</code>是是一个结构体，会强引用放入的元素。比如我们的delegate是一个ViewController，将我们的ViewController放入Array后，只要Array不释放，我们的ViewController就永远不会释放，但是ViewController可能已经被pop出去了，这就造成了内存泄漏。那怎么办呢？</p>

<p>只要做一层weak化的包装就好，就拿<code>Log4g</code>来说，内部维护了一个delegate的数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fileprivate</span> <span class="n">var</span> <span class="n">delegates</span> <span class="o">=</span> <span class="o">[</span><span class="no">WeakLog4GDelegate</span><span class="o">]</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>那<code>WeakLog4GDelegate</code>是个什么鬼呢，这个属性的申明是<code>fileprivate</code>的，说明用户是不知道<code>WeakLog4GDelegate</code>的，我们来看看<code>WeakLog4GDelegate</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeakLog4GDelegate</span><span class="p">:</span> <span class="no">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="n">delegate</span> <span class="p">:</span> <span class="no">Log4GDelegate</span><span class="p">?</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">(</span><span class="ss">delegate</span><span class="p">:</span> <span class="no">Log4GDelegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">delegate</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，<code>WeakLog4GDelegate</code>是<code>Log4GDelegate</code>的一个weak化包装，内部有一个<code>Log4GDelegate</code>的weak属性，也通过<code>Log4GDelegate</code>来初始化。</p>

<p>这样当我们将<code>WeakLog4GDelegate</code>放入数组后，外部的Log4GDelegate就不会因为强制引用而无法释放了。当然<code>WeakLog4GDelegate</code>并不是一个<code>open</code>或者<code>public</code>的类，所以我们还需要包装一些方法让使用者添加或删除外部使用的<code>Log4GDelegate</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">open</span> <span class="k">class</span> <span class="n">func</span> <span class="n">add</span><span class="p">(</span><span class="ss">delegate</span><span class="p">:</span><span class="no">Log4GDelegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">log4g</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">shared</span>
</span><span class='line'>    <span class="sr">//</span> <span class="n">delete</span> <span class="n">null</span> <span class="n">week</span> <span class="n">delegate</span>
</span><span class='line'>    <span class="n">log4g</span><span class="o">.</span><span class="n">delegates</span> <span class="o">=</span> <span class="n">log4g</span><span class="o">.</span><span class="n">delegates</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="vg">$0</span><span class="o">.</span><span class="n">delegate</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="sr">//</span> <span class="n">judge</span> <span class="k">if</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">delegate</span> <span class="n">from</span> <span class="n">parameter</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">contains</span> <span class="o">=</span> <span class="n">log4g</span><span class="o">.</span><span class="n">delegates</span><span class="o">.</span><span class="n">contains</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="vg">$0</span><span class="o">.</span><span class="n">delegate?</span><span class="o">.</span><span class="n">hash</span> <span class="o">==</span> <span class="n">delegate</span><span class="o">.</span><span class="n">hash</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="sr">//</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">contains</span><span class="p">,</span> <span class="n">append</span> <span class="n">it</span> <span class="n">with</span> <span class="n">weak</span> <span class="n">wrapped</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">contains</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">week</span> <span class="o">=</span> <span class="no">WeakLog4GDelegate</span><span class="p">(</span><span class="ss">delegate</span><span class="p">:</span> <span class="n">delegate</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">week</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">open</span> <span class="k">class</span> <span class="n">func</span> <span class="n">remove</span><span class="p">(</span><span class="ss">delegate</span><span class="p">:</span><span class="no">Log4GDelegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">log4g</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">shared</span>
</span><span class='line'>    <span class="n">log4g</span><span class="o">.</span><span class="n">delegates</span> <span class="o">=</span> <span class="n">log4g</span><span class="o">.</span><span class="n">delegates</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>        <span class="sr">//</span> <span class="n">filter</span> <span class="n">null</span> <span class="n">weak</span> <span class="n">delegate</span>
</span><span class='line'>        <span class="k">return</span> <span class="vg">$0</span><span class="o">.</span><span class="n">delegate</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>        <span class="sr">//</span> <span class="n">filter</span> <span class="n">the</span> <span class="n">delegate</span> <span class="n">from</span> <span class="n">parameter</span>
</span><span class='line'>        <span class="k">return</span> <span class="vg">$0</span><span class="o">.</span><span class="n">delegate?</span><span class="o">.</span><span class="n">hash</span> <span class="o">!=</span> <span class="n">delegate</span><span class="o">.</span><span class="n">hash</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纯Swift2.0工程CocoaChina+从0到1遇到的坑和解决方案]]></title>
    <link href="http://zixun.github.io/blog/2015/10/25/chun-swift2-dot-0gong-cheng-cocoachina-plus-cong-0dao-1yu-dao-de-keng-he-jie-jue-fang-an/"/>
    <updated>2015-10-25T00:03:58+08:00</updated>
    <id>http://zixun.github.io/blog/2015/10/25/chun-swift2-dot-0gong-cheng-cocoachina-plus-cong-0dao-1yu-dao-de-keng-he-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>好久没写技术文章了，感觉这个事情不应该被搁置，程序员应该努力去学一些除了写代码以外的东西。</p>

<p>前段时间博主从阿里巴巴跳槽加盟滴滴快的，乘着跳槽的时间差做了两件一直想做的事：
一件就是用Swift2.0写了一个CocoaChina的iOS app（名字叫CocoaChina+，文章的最后会介绍），另外一件就是带着女票去北京玩了一趟，见了见以前读硕时在实验室的几个哥们。整个app从无到有遇到了好多Swift的坑，只可惜没有一一记载下来，现在凭着记忆将还记得的坑以及好的东西记载下来与大家分享。</p>

<!-- more -->


<h2>坑: dyld: Library not loaded: @rpath/libswiftCore.dylib</h2>

<p>Swift代码在模拟器上跑的好好的，突然到真机就不行了，一起来就报错<code>dyld: Library not loaded: @rpath/libswiftCore.dylib</code></p>

<h4>解决方案</h4>

<p>点开你工程target的<code>Build Settings</code>，搜索<code>Embedded Content Contains Swift Code</code>，这个值默认是NO，设置为YES即可。</p>

<h4>参考</h4>

<p><a href="http://stackoverflow.com/questions/26024100/dyld-library-not-loaded-rpath-libswiftcore-dylib/26949219#26949219">http://stackoverflow.com/questions/26024100/dyld-library-not-loaded-rpath-libswiftcore-dylib/26949219#26949219</a></p>

<h2>坑: Cannot assign to property:&ldquo;xxx&#8221;is a get-only property</h2>

<p>只读属性当然是不能设置的啦，博主是不是傻。这里说的情况有点不一样。比如我们有一份Obectice-C的代码，其中<code>Class A</code>有个只读属性<code>Class B</code>，<code>Class B</code>又有一个读写属性<code>Property P</code>，然后我们把这份OC代码放到我们的Swift工程中，用Swift去调用<code>A.B.P</code>,就会报错<code>Cannot assign to property:"xxx"is a get-only property</code>，有点类似Swift可选链的感觉，一但OC的类其中一个是只读的，接下去的就都是只读的了。为什么这里一直强调OC代码，因为博主试过Swift的代码就不存在这个问题。</p>

<h4>解决方案</h4>

<p>写一个<code>SwiftFucker</code>OC类，在这个类里面去调用这行代码返回，恩，<code>SwiftFucker</code>！</p>

<pre><code>@interface SwiftFucker : NSObject

+ (void)fuckSetIsAutoLoginEnabled;

@end

@implementation SwiftFucker

+ (void)fuckSetIsAutoLoginEnabled {
    //Swift中chatManager是readonly，会让他的属性IsAutoLoginEnabled也变成readonly
    [[EaseMob sharedInstance].chatManager setIsAutoLoginEnabled:YES];
}

@end
</code></pre>

<p>Swift中就直接这样调：</p>

<pre><code>SwiftFucker.fuckSetIsAutoLoginEnabled()
//EaseMob.sharedInstance().chatManager.isAutoLoginEnabled = true;
</code></pre>

<h2>坑: 收到Apple的iTunes Store邮件说Invalid Swift Support</h2>

<p>当我们用Xcode构建打包后提交到AppStore，然后准备喝杯咖啡，喝完看看iTunesConnect后台对我们的App处理完毕没，完毕了就可以提交审核了，可是千等万等一直提示你的构建<code>正在处理</code>，过了好一会你的开发者邮箱就收到了Apple的邮件说你的App有问题啊，不支持Swift啊：</p>

<pre><code>Invalid Swift Support - The files libswiftCoreAudio.dylib, libswiftCoreMedia.dylib don’t match /Payload/CocoaChinaPlus.app/Frameworks/libswiftCoreAudio.dylib, /Payload/CocoaChinaPlus.app/Frameworks/libswiftCoreMedia.dylib.
Make sure the files are correct, rebuild your app, and resubmit it. Don’t apply post-processing to /Payload/CocoaChinaPlus.app/Frameworks/libswiftCoreAudio.dylib, /Payload/CocoaChinaPlus.app/Frameworks/libswiftCoreMedia.dylib.
</code></pre>

<h4>解决方案</h4>

<p>其实Swift工程有个坑，就是Swift为了支持之前的OS版本，会将Swift相关的lib全部打包到我们的工程中，也就是上面列出来的libswift相关的库，所以你不妨试一下，新建一个OC的工程和一个Swift的工程，然后各自打包，OC的才几百K，Swift的5M，哎，啥都没干呢，就感觉被Swift干了~。这5M就是Swift运行时相关的lib。那上面Apple告诉我们app里找不到这几个库，其实是Cocoapods的bug，将我们的Cocoapods更新到目前最新的0.39.0即可。</p>

<h4>参考</h4>

<p><a href="https://github.com/CocoaPods/CocoaPods/issues/4188">https://github.com/CocoaPods/CocoaPods/issues/4188</a></p>

<h5>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;我是可爱的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h5>

<p>以上是博主目前能记得的Swift工程会遇到的恶心的坑，后续要是想起来其他的坑肯定会上来填坑，哎，做笔记有多重要，以后感觉要把自己遇到的每个bug，每个坑都记录下来，定期整理，搞不好还能出本书，哈哈~。</p>

<p>说完坑，我们再来说说Swift中 好的 让人激动人心的 Objective-C没有的 激起写代码欲望的（好想修饰词太多了）的好东西吧。当然不是讲语法，讲Swift语法好的网上一大坨一大坨的，这里要讲的是第三方库。</p>

<h2>RxSwift</h2>

<p>玩过Objective-C的MVVM的同学肯定知道<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>这个库，吊炸天的一个库，目前Github上的Star已经破万了。那Swift上有没有这样的库呢，</p>

<p>当然有,那就是<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>。
当然，ReactiveCocoa现在是4.0版本了，他在3.0版本的时候就出了Swift版的API，这里并不想讨论在Swift工程中那个库更好，stackoverflow上也有人全方位的比较过着两个库:<a href="http://stackoverflow.com/questions/32542846/reactivecocoa-vs-rxswift-pros-and-cons">ReactiveCocoa vs RxSwift &ndash; pros and cons</a>,看官们不妨可以移步过去看一下。</p>

<p>不过楼主最后还是打算使用RxSwift，毕竟用Swift实现，没有历史包袱，而且RxSwift的文档和Demo实在太全面太好了。而且RxSwift是<a href="https://github.com/ReactiveX">ReactiveX</a>组织推出的，正宗王老吉，正宗好声音，不是，皇族血统，德玛西亚~</p>

<p>博主是在App发布后才了解到这个库，所以打算在App的下个版本接入RxSwift，到时候再分享接入心得给大家。</p>

<h2>Neon</h2>

<p><a href="https://github.com/mamaral/Neon">Neon</a>是一个Swift上另辟蹊径的布局库。</p>

<p>Neon没有用AutoLayout来包装，AutoLayout我就不吐槽了，因为已经无力吐槽了。不过Swift上有个库叫做<a href="https://github.com/SnapKit/SnapKit">Snapkit</a>,是从OC的<a href="https://github.com/SnapKit/Masonry">Masonry</a>演变过来的，现在Masonry也归属SnapKit组织名下了。不过Masonry的文档已经写的很清楚了：现在俺们只做bugfix以及合并一些高质量的PR，赶紧去看看Snapkit吧。可见Swift在国外俨然已成主流了。</p>

<p>说回Neon，他的语法类似描述，非常简单，可以有效减小我们布局代码的行数，不过个人感觉一行代码略长。当然博主也是从App发布后才知道这个库的，所以打算在App的下个版本接入Neon</p>

<h2>SQLite.swift</h2>

<p>博主本来是用OC上老牌的<a href="https://github.com/ccgus/fmdb">FMDB</a>,但是当时FMDB接入Swift2.0工程一直报错，FMDB的作者也一直没怎么关心这件事，可能当时Swift2.0还是Bete的缘故。后来就接了SQLite.swift,总体来说蛮好用的，可能我的App本身存储的需求就比较简单，不过我问过SQLite.swift的作者，<a href="https://github.com/stephencelis/SQLite.swift/issues/234">SQLite.swift是没有缓存的</a>，如果你要频繁操作一个数据库中的表数据的话，最好自己做一下缓存。</p>

<h2>SwiftyUserDefaults</h2>

<p>操作<code>NSUserDefaults</code>很麻烦，每次都要写好几行代码。<a href="https://github.com/radex/SwiftyUserDefaults">SwiftyUserDefaults</a>很好的利用了Swift的语法特性，让<code>NSUserDefaults</code>的操作达到了超级简单的水准，比如：</p>

<pre><code>Defaults[colorKey] = "red"
Defaults[colorKey] // =&gt; "red", typed as String
</code></pre>

<p>恩，领先OC好几年~</p>

<h2>Ji</h2>

<p><a href="https://github.com/honghaoz/Ji">Ji</a>是一个HTML/XML解析库，作者是一位加拿大华人，OC上也有类似的库<a href="https://github.com/topfunky/hpple">hpple</a>,当时作者接入的是hpple，后来发现了Ji，就试着接入Ji，然后发现这两个库有一个相同功能的API返回的结果不同，一问才知道是hpple的bug，果断抛弃hpple，投入Ji的怀抱。<a href="https://github.com/honghaoz/Ji/issues/6">那个bug链接</a></p>

<h5>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;我是第二条可爱的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h5>

<p>好了，接下去我们来说说我的App.做iOS开发的都知道国内最大的苹果开发者技术资讯网站CocoaChina.com,可是这个网站却没有一个App，AppStore上是有一个官方的CocoaChina客户端app，但是已经好几年没有更新了，app里空无一物，一点数据都没有。AppStore上也有几个第三方开发者做的CocoaChina移动端的App，但是他们都有一个不好的地方就是没有做代码高亮，这样让我们看博客文章的时候很蛋疼，CocoaChina+就解决了这个问题：</p>

<h2>CocoaChina+</h2>

<p><img src="http://zixun.github.io/images/custom/vender/icon.png" alt="iconpng" /></p>

<p>先说一下CocoaChina+相对于市面上的app的几个亮点吧：</p>

<h4>1.代码高亮</h4>

<p>目前市面上的第三方的CocoaChina的客户端app都没有做代码高亮，包括官方的Wap页面。这导致我们在手机端看博文的时候一到代码部分就非常蛋疼。CocoaChina+很好的解决了这个问题，极大的提高了阅读的体验。</p>

<h4>2.流量更省</h4>

<p>文章渲染需要的CSS和JS代码CocoaChina+直接打包进了app内，每次文章加载的时候就不再需要去服务端获取一次了，极大的提高了加载速度，节省了用户的流量。</p>

<h4>3.纯黑设计</h4>

<p>整个app采用纯黑色的设计，程序员都喜欢把自己的编辑器或者IDE界面调整成黑色，这样才可以把精力都集中在内容上，CocoaChina+的用户也基本都是程序员，因此也采用了纯黑色的设计，让用户在阅读文章的时候精力更加集中。</p>

<h4>4.内置聊天室</h4>

<p>app内部整合了聊天室的功能，开发者可以直接进入和其他开发者直接匿名交流。是不是很好玩。</p>

<p>再说说这个app后续版本迭代需要更新的地方：</p>

<h5>1.论坛</h5>

<p>CocoaChina论坛由于有很多Apple的logo。所以目前App内的论坛都把图片去掉了，目前上线的是一个简单的论坛功能，后续会着力更新论坛模块，CocoaChina的论坛做的还是很牛B的，所以后续一定会有一个很nice的论坛模块展示在CocoaChina+中</p>

<h5>2.登陆</h5>

<p>CocoaChina+目前没有登录功能，导致目前论坛上大家还不能直接评论，这个后续也会更新维护</p>

<h5>3.聊天界面</h5>

<p>CocoaChina+的聊天功能是整合了第三方的UI，不是很nice，后续楼主会自己用Swift重写一套简洁的聊天UI更新上去</p>

<h5>3.技术层面</h5>

<p>CocoaChina+是一个纯Swift2.0的项目，用的第三方库也是能有Swift的就用Swift，最后才会考虑Objective-C。后续也会对代码做一次重构，整合进RxSwift(Swift版的ReactiveCocoa)和Swit上的布局框架Neon。</p>

<h5>4.iPad版本</h5>

<p>目前app只支持iPhone客户端，后续会推出iPad客户端</p>

<p>最后附上App安装二维码</p>

<p><img src="http://zixun.github.io/images/custom/vender/qrcode.png" alt="qrcode.png" /></p>

<p>以及部分截图：</p>

<p><img src="http://zixun.github.io/images/custom/vender/home_cocoachina.jpg" alt="home_cocoachina.jpg" />
<img src="http://zixun.github.io/images/custom/vender/article_cocoachina.jpg" alt="article_cocoachina.jpg" />
<img src="http://zixun.github.io/images/custom/vender/code_cocoachina.jpg" alt="code_cocoachina.jpg" /></p>

<h2>关于项目开源</h2>

<p>这个App是纯Swift2.0编写的，目前项目还有很多没有上线的功能，部分功能还需要改善，代码也还需要整理，因此还不打算开源。不过等所有功能都上线了，楼主会整理下代码后开源到Github。到时候也会在App内发Push推送周知大家.不过这个过程可能会比较漫长，毕竟是个人项目，只能抽业余时间来做，还请大家耐心等待~</p>

<p>整个app整合了很多第三方平台，如友盟，极光推送，Google-Admob，环信IM等，对于今后有想做Swift项目的同学有很大的参考价值。</p>

<p><strong>希望有一天CocoaChina+会成为一个iOS开发者共同维护的App！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6插件开发入门]]></title>
    <link href="http://zixun.github.io/blog/2015/05/04/xcode6cha-jian-kai-fa-ru-men/"/>
    <updated>2015-05-04T17:34:03+08:00</updated>
    <id>http://zixun.github.io/blog/2015/05/04/xcode6cha-jian-kai-fa-ru-men</id>
    <content type="html"><![CDATA[<p>Xcode提供了所有你创建一个App需要的功能。但是由于其不开源以及没有制作Xcode-Plugin相关的文档，在我们需要添加一些自己的想法和功能的时候变得缺乏灵活性。
但是我们可以通过一些非官方的手段来扩展我们自己的Xcode，并且分享给别人使用。</p>

<!-- more -->


<h2>Xcode Plug-in能做什么</h2>

<p>太多了，我们可以自动生成代码注释（<a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter</a>）,我们可以在代码编辑器中直接显示我们初始化的UIColor的颜色（<a href="https://github.com/omz/ColorSense-for-Xcode">ColorSense-for-Xcode</a>）,我们也可以在代码编辑器中直接显示我们要添加到UIImage的图片（<a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a>）,我们还可以调整控制台的颜色，修改代码样式，等等等等&hellip;.</p>

<p>我们还可以用<a href="https://github.com/supermarin/Alcatraz">Alcatraz</a>来管理我们的插件，简直方便！</p>

<h2>Xcode Plug-in放在哪</h2>

<p>所有的Xcode Plug-in都会放在一个叫<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code>文件目录下，并且所有的插件都会以<code>.xcplugin</code>作为后缀。</p>

<h2>开发自己的Xcode Plug-in</h2>

<h3>准备工作</h3>

<pre><code>1.前往[Xcode-Plugin-Template](https://github.com/kattrali/Xcode-Plugin-Template)下载Xcode插件开发的模板。
2.将下载下来的template复制到 ~/Library/Developer/Xcode/Templates/Project Templates/Application Plug-in/Xcode5 Plugin.xctemplate文件夹中，如果没有对应的文件夹就自己手工创建一个。
3.重启Xcode，当你新建一个工程的时候就可以在OSX中看到一个Application Plug-in的选项，里面有一个Xcode Plug-in模板。
</code></pre>

<p><img src="http://zixun.github.io/images/custom/post/xcode6cha-jian-kai-fa-ru-men/template.png" alt="hello world" /></p>

<h3>进入开发</h3>

<p>我们新建一个Xcode Plug-in模板的工程，可以看到模板为我们生成了好多代码。看与你工程同名的文件的<code>initWithBundle</code>方法。阅读一下后你就可以知道模板为我们填充了一个在<code>Edit</code>中添加一个<code>Do Action</code>的按钮，点击后会回调<code>doMenuAction</code>方法。</p>

<p>我们可以run一下我们的工程，你会发现启动了一个新的Xcode，因为我们做的是Xcode插件，启动的当然是Xcode，用Xcode编写Xcode的代码，是不是很有意思。试试点击新的Xcode的Edit有一个<code>Do Action</code>按钮，点击<code>Do Action</code>按钮，再回调中打个断点，看有没有回调你的方法。</p>

<h4>DVTPlugInCompatibilityUUIDs</h4>

<p>是的，你会发现你的回调方法木有调用，木有调用啊，什么鬼！其实这是因为你的插件不认识你正在跑的Xcode的版本，把你的Xcode版本介绍给它认识就好了。</p>

<pre><code>1.打开插件工程的Info.plist,找到DVTPlugInCompatibilityUUIDs，打开这个下拉框，这里有所有你的插件认识的Xcode版本。
2.在terminal中输入 defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID ，terminal会返回一串字符串给你，这就是你的Xcode的DVTPlugInCompatibilityUUID，把这串字符串添加到DVTPlugInCompatibilityUUIDs中即可。
3.再跑一次Xcode，是不是可以了~
</code></pre>

<h4>窃听Xcode通知</h4>

<p>因为Apple至今也没有公开Xcode Plugin的文档。所以我们需要通过一些其他的思路寻找方法。比如窃听我们在操作Xcode的时候Xcode发出的各种通知。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">notificationLog:</span><span class="p">)</span> <span class="nl">name:</span><span class="nb">nil</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这行代码加入到我们的工程初始化中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notificationLog:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notify</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">notify</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就可以监听我们在对xcode做操作的时候xcode发出的所有通知了。跑一下，是不是通知刷刷的来了。。。</p>

<h3>实现一个Xcode插件功能</h3>

<h4>寻找需求</h4>

<p>既然我们都知道了这么多通知，我们是不是可以通过抓取其中某一个通知动手优化下Xcode呢。现在Xcode插件辣么多，好多咱们能想到的功能，其实用心在网上google一下，都能找到。鉴于入门，那么我们来坐一个比较简单的功能吧。</p>

<p>比如我们在xcode文件导航区域要显示这个文件在Finder中的位置的时候，我们需要在这个文件中右键点击，然后在展示列表中点击<code>show in finder</code>，而且这个<code>show in finder</code>按钮还没有快捷键。要是能有个快捷键能够快速打开就好了。</p>

<h4>构思实现</h4>

<pre><code>1.我们需要监听文件导航区域选中的文件改变时候的通知，然后保存当前选中的文件的路径
2.我们需要新建一个NSMenuItem，然后设置我们需要的快捷键。
3.当我们按下快捷键的时候打开我们的workspace，并且选中到指定的文件。
</code></pre>

<h4>talk is cheep，show u the code</h4>

<p>1.我们需要监听文件导航区域选中的文件改变时候的通知，然后保存当前选中的文件的路径</p>

<p>根据之前监听xcode通知，我们会发现一个叫<code>transition from one file to another</code>这个通知，这就是我们需要的选中文件改变时候的通知。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notificationLog:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notify</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">notify</span><span class="p">.</span><span class="n">name</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;transition from one file to another&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSURL</span> <span class="o">*</span><span class="n">originURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">notify</span><span class="p">.</span><span class="n">object</span> <span class="nl">valueForKey:</span><span class="s">@&quot;next&quot;</span><span class="p">]</span> <span class="nl">valueForKey:</span><span class="s">@&quot;documentURL&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">originURL</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">originURL</span> <span class="n">absoluteString</span><span class="p">].</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">7</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">originURL</span><span class="p">.</span><span class="n">absoluteString</span> <span class="nl">substringFromIndex:</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将这个通知给我们的文件路径保存下来，为什么要<code>substringFromIndex:7</code>，因为返回的URL是<code>file:///User........</code>格式的，需要切换成<code>/User...</code>的格式。</p>

<p>2.我们需要新建一个NSMenuItem，然后设置我们需要的快捷键。</p>

<p>这个比较简单修改下模板帮我们生成的那几行代码，加入快捷键就可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">menuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSApp</span> <span class="n">mainMenu</span><span class="p">]</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;Edit&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">menuItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="p">[</span><span class="n">NSMenuItem</span> <span class="n">separatorItem</span><span class="p">]];</span>
</span><span class='line'>            <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">actionMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Do action&quot;</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">doMenuAction</span><span class="p">)</span> <span class="nl">keyEquivalent:</span><span class="s">@&quot;F&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalentModifierMask:</span><span class="n">NSShiftKeyMask</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setTarget:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="n">actionMenuItem</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>objective-c</p>

<p>关键在于这两行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">actionMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Do action&quot;</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">doMenuAction</span><span class="p">)</span> <span class="nl">keyEquivalent:</span><span class="s">@&quot;F&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalentModifierMask:</span><span class="n">NSShiftKeyMask</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的快捷键就是<code>shift + F</code>，读者可以根据自己的方式修改。</p>

<p>3.当我们按下快捷键的时候打开我们的workspace，并且选中到指定的文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doMenuAction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">url</span> <span class="n">stringByURLDecodingStringParameter</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSWorkspace</span> <span class="n">sharedWorkspace</span><span class="p">]</span> <span class="nl">selectFile:</span><span class="n">self</span><span class="p">.</span><span class="n">url</span> <span class="nl">inFileViewerRootedAtPath:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个就比较好理解了。把第一步保存的URL传递过去就可以，不过需要做一个URLDecoding，因为xcode给我们的是encode过的URL。</p>

<h2>Xcode &ldquo;API&rdquo;</h2>

<p>Xcode插件开发已经不是什么新技术了，所以也有很多开发者dump出了很多Xcode的API。大家可以按需要加入到自己的工程中使用。</p>

<h3>Working with projects files</h3>

<p><a href="https://github.com/appsquickly/XcodeEditor">XcodeEditor</a>有一组强大的操纵项目文件的API，比如inspect headers, list frameworks, add classes等功能。如果你要对你项目文件进行操作，千万不要忘记这个库。</p>

<h3>NSTask</h3>

<p><code>NSTask</code>的功能类似像terminal中执行command命令一样，非常实用。</p>

<p><a href="http://www.raywenderlich.com/36537/nstask-tutorial">nstask-tutorial</a></p>

<h3>Cocoa</h3>

<p>是<code>Cocoa</code>，不是<code>Cocoa touch</code>，应为Xcode是MacOS上的app。所以编写Xcode插件会用到很多<code>Cocoa</code>的API，需要了解<code>Cocoa</code>编程。</p>

<h2>扩展阅读</h2>

<p><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/">Xcode5 Plugins 开发简介</a></p>

<p><a href="http://www.overacker.me/blog/2015/01/25/creating-an-xcode-plugin">Creating an Xcode Plugin: A Quick-Start Guide</a></p>

<p><a href="http://bits.citrusbyte.com/extending-xcode-6-with-plugins/">Extending Xcode 6 with plugins</a></p>

<p><a href="http://www.fantageek.com/1297/how-to-create-xcode-plugin/">How to create Xcode plugin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS单元测试系列]单元测试编码规范]]></title>
    <link href="http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-bian-ma-gui-fan/"/>
    <updated>2015-04-16T18:11:16+08:00</updated>
    <id>http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-bian-ma-gui-fan</id>
    <content type="html"><![CDATA[<p>编写单元测试与编写工程代码略有不同。我们需要准备数据，mock对象，调用工程Api,验证结果。而且一般测试代码都会比工程代码要大。就像<a href="http://www.objc.io/issue-15/xctest.html">Real-World Testing with XCTest</a>一文中提到“目前为止，我们的编码库已经纵横 190 个文件和 18,000 行代码，达到了 544 kB。我们测试部分的代码现在差不多有1,200 kB，大概有被测试代码的两倍”。那么应该如何定义单元测试代码编写规范，使得代码更整洁，可读性更高呢？</p>

<!-- more -->


<p><strong>为了工程代码的保密，文中的代码在命名的时候在不影响理解的情况下都做了改动</strong></p>

<h2>1.Given-When-Then分段</h2>

<p>每个case其实都可以分为三步走，1.mock对象，准备测试数据。2.调用目标API 3.验证输出和行为。所以我们可以用如下方式将3步分别放入Given-When-Then三个分段中。（为了保密，代码做了改动）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNeedToShowRowWhenTypeIsAll</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">//given</span>
</span><span class='line'>    <span class="n">_sut</span><span class="p">.</span><span class="n">collectionType</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSIndexPath</span> <span class="o">*</span><span class="n">path1</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSIndexPath</span> <span class="nl">indexPathForRow:</span><span class="mi">1</span> <span class="nl">inSection:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//when</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">needToShow1</span> <span class="o">=</span> <span class="p">[</span><span class="n">_sut</span> <span class="nl">needToShowRow:</span><span class="n">path1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//then</span>
</span><span class='line'>    <span class="n">assertThatBool</span><span class="p">(</span><span class="n">needToShow1</span><span class="p">,</span><span class="n">isTrue</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们一眼扫过去就可以清晰的看出一个case大体上都在干什么。</p>

<h2>2.一个Case只测试一种情况</h2>

<p>可能我们调用的一个API内部有一个if&hellip;else&hellip;。我建议if一个case，else一个case。分两个不同的case来作测试.这样每个case就很清晰自己在测试什么东西。而如果全部杂糅在一个case中，可读性会降低不少，而且case体积也会变得相对大很多，因为你要Given-When-Then两次。更不建议在case中写for循环验证。有人说我的测试目标函数中有很多if&hellip;else&hellip;,那么我觉得你应该重构下你的设计了。</p>

<p>所以，我们的结论是一个Case只测试一种情况，不同情况用When标明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNeedToShowRowWhenTypeIsAll</span><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNeedToShowRowWhenTypeIsOnSell</span><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.用_sut来标明被测试类</h2>

<p>一个测试文件只有一个被测试类。但是当我们的测试文件越来越多的时候，当我们看一个测试case的时候需要看懂这个case才明白我们的被测试类是谁。或者我们也可以看测试文件名（XXXXXXTest.m）才知道我们的被测试类是谁，但是这样却不是很直观。所以不管我们在那个测试文件中，测试的类是谁，叫什么名字，我们都以为一个局部变量名_sut来定义我们的被测试类。这样我们一眼就能知道我们被测试类是谁。</p>

<p>_sut就是System Under Test的缩写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">JHSCollectionDataSourceTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">JHSCollectionDataSource</span> <span class="o">*</span><span class="n">_sut</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">testNeedToShowHeaderWhenTypeIsAll</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">//given</span>
</span><span class='line'>    <span class="n">_sut</span><span class="p">.</span><span class="n">collectionType</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//when</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">needToShow1</span> <span class="o">=</span> <span class="p">[</span><span class="n">_sut</span> <span class="nl">needToShowHeader:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//then</span>
</span><span class='line'>    <span class="n">assertThatBool</span><span class="p">(</span><span class="n">needToShow1</span><span class="p">,</span><span class="n">isTrue</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4.用Category暴露私有函数和属性</h2>

<p>我们的测试case中调用的方法可能会改变一个私有的属性，调用一个私有的方法。怎么去优雅的验证这种行为呢，我们可以在测试文件的开头用一个名字为UnitTest的category来暴露出我们的私有方法和属性（属性暴露的是属性对应的getter和setter方法）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">JHSTestDataSource</span> <span class="nl">(UnitTest)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">getSellGroupCount</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">needShowHeader:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p><strong>enjoy it！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS单元测试系列]Singleton如何测试]]></title>
    <link href="http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-singletonru-he-ce-shi/"/>
    <updated>2015-04-16T14:53:44+08:00</updated>
    <id>http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-singletonru-he-ce-shi</id>
    <content type="html"><![CDATA[<p>Singletion设计模式在cocoa中被广泛使用。在我们平时写App代码时也经常会将一些工具类，管理类设计成Singletion。Signletion通过一个类方法返回一个唯一的实例，与我们平常通过实例化生成一个个实例的场景有所不同。如果我们要stub一个Singletion的类的实例方法，那么这个Signletion的类初始化方法（eg:sharedMange()）必须返回一个mock对象。因为只有mock对象才可以做stub操作。那么我们应该如何mock我们的Singletion呢，我们通过下面的例子一步步分析解决这个问题。</p>

<!-- more -->


<h1>Singleton场景</h1>

<p>比如我有一个Singleton的类（DemoStatusManage）,他有一个实例方法currentStatus会返回一个1-100的随机数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">DemoStatusManage</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">currentStatus</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DemoStatusManage</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">_status</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">sharedManage</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">manage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">manage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DemoStatusManage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">manage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">currentStatus</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">getRandomNumber:</span><span class="mi">1</span> <span class="nl">to:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nl">getRandomNumber:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">from</span> <span class="nl">to:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">to</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">from</span> <span class="o">+</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">to</span> <span class="o">-</span> <span class="n">from</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在我的另外一个类中会去调用这个Singletion的currentStatus方法，并且将返回的数据渲染到另外那个类的label文案上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateStatusNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">statusLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,(</span><span class="kt">long</span><span class="p">)[[</span><span class="n">DemoStatusManage</span> <span class="n">sharedManage</span><span class="p">]</span> <span class="n">currentStatus</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个很简单的Singletion场景，但是在测试<code>updateStatusNumber</code>这个API的时候由于依赖到了外部的DemoStatusManage的currentStatus方法，而且这个方法返回的是一个随机数值，所以我们必须mock掉Singletion，然后再stub调currentStatus方法，让这个方法返回我们期望的一个固定值。</p>

<h1>应该用OCMock的哪个API呢</h1>

<p>应该用OCMock的哪个API呢？OCMStrictClassMock(cls)? OCMClassMock(cls)? OCMPartialMock(obj)?</p>

<p>其实这里按照常规的mock测试一个API都用不上。因为我们mock出来的东西（对象或者是类）只能在我们的测试用例中，updateStatusNumber方法里面调用的永远是DemoStatusManage的原生类。</p>

<p>那如何才能让sharedManage不管在哪里（测试用例中和updateStatusNumber中）都返回我们的mock对象呢，答案是用category重写sharedManage让它返回我们的mock对象.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">mock</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManage</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mock</span><span class="p">)</span>  <span class="k">return</span> <span class="n">mock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">manage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">manage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DemoStatusManage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">manage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在我们的单元测试类中只要在测试case中初始化一下mock，sharedManage不管在哪里调用就都会返回我们需要的mock对象了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">mock</span> <span class="o">=</span> <span class="n">OCMClassMock</span><span class="p">([</span><span class="n">DemoStatusManage</span> <span class="n">class</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然我们也可以让mock返回一个PartialMock对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">mock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">([[</span><span class="n">DemoStatusManage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>包装优化</h1>

<h3>去掉拷贝的代码</h3>

<p>你应该也发现了，这段代码我们是拷贝过来的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>   <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">manage</span><span class="p">;</span>
</span><span class='line'>   <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>       <span class="n">manage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DemoStatusManage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">manage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用这种方式，我们会陷入一个问题，我们在维护两套相同的代码，那天app工程中相关的sharedManage的方法有所变动，这里也要相应的变动。有什么办法可以让它找到原来的IMP实现呢，Matt大神的一篇文章中就告诉我们，Yes，可以的！<a href="http://www.cocoawithlove.com/2008/03/supersequent-implementation.html">Supersequent implementation</a>.我们可以用Matt的invokeSupersequentNoArgs()宏定义来实现这个功能。</p>

<p>这样我们的Cagegory差不多就长这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">mock</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManage</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mock</span><span class="p">)</span>  <span class="k">return</span> <span class="n">mock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">invokeSupersequentNoArgs</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>包装mock方法</h3>

<p>笔者在用这种方式写测试用例的时候发现，可能我的UnitTest这个Category是写在Atest.m中的，但是在没有写Category也没有引用Atest.m的Btest.m中，也会进入到重写的sharedManage中，而由于mock是static的，也没有做释放操作，导致DemoStatusManage永远是一个mock对象。可能是因为XCTest框架的原因，因为所有的XCTestCase都是没有.h文件的，具体原因也不得而知。</p>

<p>所以，要解决这个问题，我们必须在mock使用完毕后释放它，并且将创建和释放都包装出来，提供接口给测试用例调用。而且我们可以提供不同类型的mock方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">JTKCreateClassMock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">JTKCreatePartialMock:</span><span class="p">(</span><span class="n">DemoStatusManage</span> <span class="o">*</span><span class="p">)</span><span class="nv">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">JTKReleaseMock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">DemoStatusManage</span> <span class="o">*</span><span class="n">mock</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DemoStatusManage</span> <span class="nl">(UnitTest)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManage</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mock</span><span class="p">)</span>  <span class="k">return</span> <span class="n">mock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">invokeSupersequentNoArgs</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">JTKCreateClassMock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mock</span> <span class="o">=</span> <span class="n">OCMClassMock</span><span class="p">([</span><span class="n">DemoStatusManage</span> <span class="n">class</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">JTKCreatePartialMock:</span><span class="p">(</span><span class="n">DemoStatusManage</span> <span class="o">*</span><span class="p">)</span><span class="nv">obj</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">JTKReleaseMock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mock</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就可以在使用mock的时候调用JTKCreateClassMock 或者 JTKCreatePartialMock: 来生成我们需要的mock对象，在使用完毕后释放我们的mock对象，就能实现我们的测试需求了。</p>

<h3>宏定义简化代码</h3>

<p>我们的工程中不可能只有一个Singletion，少则十几，多则上百。如果我们对每个Singletion都这么写一遍Category的话，这个成本也太他妈大了。而其实不管是哪个Singletion，这个UnitTest的Category都是大同小异的，那么我们不如写个宏定义来简化我们的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define JTKMOCK_SINGLETON(__className,__sharedMethod)               \</span>
</span><span class='line'><span class="cp">JTKMOCK_SINGLETON_CATEGORY_DECLARE(__className)                     \</span>
</span><span class='line'><span class="cp">JTKMOCK_SINGLETON_CATEGORY_IMPLEMENT(__className,__sharedMethod)    \</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define JTKMOCK_SINGLETON_CATEGORY_DECLARE(__className)         \</span>
</span><span class='line'><span class="cp">                                                                \</span>
</span><span class='line'><span class="cp">@interface __className (UnitTest)                               \</span>
</span><span class='line'><span class="cp">                                                                \</span>
</span><span class='line'><span class="cp">+ (instancetype)JTKCreateClassMock;                             \</span>
</span><span class='line'><span class="cp">                                                                \</span>
</span><span class='line'><span class="cp">+ (instancetype)JTKCreatePartialMock:(__className *)obj;        \</span>
</span><span class='line'><span class="cp">                                                                \</span>
</span><span class='line'><span class="cp">+ (void)JTKReleaseMock;                                         \</span>
</span><span class='line'><span class="cp">                                                                \</span>
</span><span class='line'><span class="cp">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define JTKMOCK_SINGLETON_CATEGORY_IMPLEMENT(__className,__sharedMethod)    \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">static __className *mock_singleton_##__className = nil;                     \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">@implementation __className (UnitTest)                                      \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">+ (instancetype)__sharedMethod {                                            \</span>
</span><span class='line'><span class="cp">    if (mock_singleton_##__className) return mock_singleton_##__className;  \</span>
</span><span class='line'><span class="cp">    return JTKInvokeSupersequentNoParameters();                             \</span>
</span><span class='line'><span class="cp">}                                                                           \</span>
</span><span class='line'><span class="cp">+ (instancetype)JTKCreateClassMock {                                        \</span>
</span><span class='line'><span class="cp">    mock_singleton_##__className = OCMClassMock([__className class]);       \</span>
</span><span class='line'><span class="cp">    return mock_singleton_##__className;                                    \</span>
</span><span class='line'><span class="cp">}                                                                           \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">+ (instancetype)JTKCreatePartialMock:(__className *)obj {                   \</span>
</span><span class='line'><span class="cp">    mock_singleton_##__className = OCMPartialMock(obj);                     \</span>
</span><span class='line'><span class="cp">    return mock_singleton_##__className;                                    \</span>
</span><span class='line'><span class="cp">}                                                                           \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">+ (void)JTKReleaseMock {                                                    \</span>
</span><span class='line'><span class="cp">    mock_singleton_##__className = nil;                                     \</span>
</span><span class='line'><span class="cp">}                                                                           \</span>
</span><span class='line'><span class="cp">                                                                            \</span>
</span><span class='line'><span class="cp">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们只需要一行代码就能搞定一个Singletion的UnitTest的Category了，来一个写一行，来一双写两行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">JTKMOCK_SINGLETON</span><span class="p">(</span><span class="n">DemoStatusManage</span><span class="p">,</span><span class="n">sharedManage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>One more thing</h1>

<p>Matt文中代码可以在github上找到<a href="https://github.com/tianyouhui/SimpleEncapsulate/blob/cb5ee50c69791b4f2ccabea06caa7a72a88f4354/SimpleEncapsulate/SimpleEncapsulateTests/OCMockSingletonExtension/NSObject%2BSupersequentImplementation.h">NSObject+SupersequentImplementation</a></p>

<p>如果使用<code>invokeSupersequentNoArgs()</code>提示<code>Too many arguments to function call,expected 0,have 2</code>,请打开你的测试工程的target，找到Build Setting下的<code>Enable Strict Checking of objc_mesSend Calls</code>,设置为NO</p>

<p>用category重写主类中的方法会有一个警告：<code>Category is implementing a method which will also be implemented by its primary class</code>,则使用以下宏在你重写的方法前后做个包装即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#pragma clang diagnostic push</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic ignored &quot;-Wobjc-protocol-method-implementation&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">JTKMOCK_SINGLETON</span><span class="p">(</span><span class="n">DemoStatusManage</span><span class="p">,</span><span class="n">sharedManage</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma clang diagnostic pop</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS单元测试系列]-译-OCMock常见使用方式]]></title>
    <link href="http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-yi-ocmockchang-jian-shi-yong-fang-shi/"/>
    <updated>2015-04-16T14:51:27+08:00</updated>
    <id>http://zixun.github.io/blog/2015/04/16/iosdan-yuan-ce-shi-xi-lie-yi-ocmockchang-jian-shi-yong-fang-shi</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> 本文翻译自OCMock官网中的一片教程外链<a href="http://hackazach.net/code/2014/03/03/effective-testing-with-ocmock/">OCMock Test Origami</a>。</p>

<p><strong>该文章使用的API是OCMock老版本的API，新版本也兼容老版本的API，译者在用到老版本的API处已经添加了对应的新版本（OCMock3）的API供读者参考。</strong></p>

<h3>爱好者</h3>

<p>这篇文章假设读者都能熟悉使用Xcode5的测试框架XCTest，或者BBD测试工具Kiwi或其他的iOS测试框架</p>

<h3>什么是mock？差不多就是纸老虎</h3>

<p>当我们写单元测试的时候，不可避免的要去尽可能少的实例化一些具体的组件来保持测试既短又快。而且保持单元的隔离。在现代的面向对象系统中，测试的组件很可能会有几个依赖的对象。我们用mock来替代实例化具体的依赖class。mock是在测试中的一个伪造的有预定义行为的具体对象的替身对象。被测试的组件不知道其中的差异！你的组件是在一个更大的系统中被设计的，你可以很有信心的用mock来测试你的组件。</p>

<!-- more -->


<h3>常见的mock使用案例</h3>

<h4>stub方法</h4>

<p>我们用一个简单的例子来开始解释OCMock中一般的stub语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">jalopy</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMock</span> <span class="n">mockForClass</span><span class="p">[</span><span class="n">Car</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'> <span class="p">[[[</span><span class="n">jalopy</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;75kph&quot;</span><span class="p">]</span> <span class="nl">goFaster:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]</span> <span class="nl">units:</span><span class="s">@&quot;kph&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="c1">// if returning a scalar value, andReturnValue: can be used</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OCMock3 新版本对应API</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">jalopy</span> <span class="o">=</span> <span class="n">OCMStrictClassMock</span><span class="p">([</span><span class="n">Car</span> <span class="n">class</span><span class="p">]);</span>
</span><span class='line'><span class="n">OCMStub</span><span class="p">([</span><span class="n">jalopy</span> <span class="nl">goFaster:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]</span> <span class="nl">units:</span><span class="s">@&quot;kph&quot;</span><span class="p">]).</span><span class="n">andReturn</span><span class="p">(</span><span class="s">@&quot;75kph&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// if returning a scalar value, andReturnValue: can be used</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个简单的例子首先从Car类中mock出一个jalopy(老爷车),然后，stub掉<code>goFaster:</code>方法让它返回字符串<code>@”75kph”</code>。stub语法可能看起来有点奇怪，但这是普遍的做法：</p>

<p><code>ourMockObject stub] whatItShouldReturn ] method:</code></p>

<p><strong>OCMock3 新版本对应API</strong></p>

<p><code>OCMStub([ourMockObject method:]).andReturn()</code></p>

<p>一个非常重要的说明：注意<code>[OCMArg any]</code>的用法。当指定一个带参数的方法时，方法被调用并且参数为指定参数的话，mock会返回andReturn:指定的值。<code>[OCMArg any]</code>方法告诉stub匹配所有的参数值。举个例子：</p>

<p><code>[car goFaster:84 units:@"mph"];</code></p>

<p>不会触发stub，因为最后一个参数不匹配&#8221;kph&#8221;.</p>

<h4>类方法</h4>

<p>OCMock会在mock实例上没有找到相同名字的实例方法的时候去找同名的类方法。在名字相同的情况下（类方法和实例方法同名），用<code>classMethod</code>来指定类方法：</p>

<p><code>[[[[jalopy stub] classMethod] andReturn:@"expired"] checkWarrany];</code></p>

<p><strong>在OCMock3中classMethod和instanceMethod的stub方式一样，例如：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">classMock</span> <span class="o">=</span> <span class="n">OCMClassMock</span><span class="p">([</span><span class="n">SomeClass</span> <span class="n">class</span><span class="p">]);</span>
</span><span class='line'><span class="n">OCMStub</span><span class="p">([</span><span class="n">classMock</span> <span class="n">aClassMethod</span><span class="p">]).</span><span class="n">andReturn</span><span class="p">(</span><span class="s">@&quot;Test string&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// result is @&quot;Test string&quot;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">SomeClass</span> <span class="n">aClassMethod</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>mock类型 &ndash; niceMock,partialMock</h4>

<p>OCMock提供了几种不同类型的mock，每个都有他们特定的使用场景。</p>

<p>用这种方式来创建任意mock：</p>

<p><code>id mockThing = [OCMock mockForClass[Thing class]];</code></p>

<p><strong>OCMock3 新版本对应API</strong></p>

<p><code>id mockThing = OCMStrictClassMock([Thing class]);</code></p>

<p>这就是我所说的<code>‘vanilla’ mock</code>。<code>‘vanilla’ mock</code>当调用一个没有stub的方法的时候会抛出一个异常。这会得到一个单调的mock，且在mock的生命周期中每一个方法调用都要被stub掉。(更多信息请看下一节关于stub)</p>

<p>如果你不想stub很多方法，用<code>‘nice’ mock</code>。<code>‘nice’ mock</code>非常有礼貌而且不会在一个没有stub掉的方法被调用的时候抛出异常。</p>

<p><code>id niceMockThing = [OCMock niceMockForClass[Thing class]];</code></p>

<p><strong>OCMock3 新版本对应API</strong></p>

<p><code>id mockThing = OCMClassMock([Thing class]);</code></p>

<p>最后一个mock类型是<code>‘partial’ mock</code>。当一个没有stub掉的方法被调用了，这个方法会被转发到真实的对象上。这是对mock技术上的欺骗，但是非常有用，当有一些类不适合让自己很好的被stub。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Thing</span> <span class="o">*</span><span class="n">someThing</span> <span class="o">=</span> <span class="p">[</span><span class="n">Thing</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="kt">id</span> <span class="n">aMock</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">partialMockForObject:</span><span class="n">someThing</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OCMock3 新版本对应API</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Thing</span> <span class="o">*</span><span class="n">someThing</span> <span class="o">=</span> <span class="p">[</span><span class="n">Thing</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="kt">id</span> <span class="n">aMock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">(</span><span class="n">someThing</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>验证方法是否被调用</h4>

<p>验证方法是否被调用非常简单。这个可以用<code>expect</code>来完成拒绝和验证方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">niceMockThing</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMock</span> <span class="n">niceMockForClass</span><span class="p">[</span><span class="n">Thing</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'> <span class="p">[[</span><span class="n">niceMockThing</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">greeting:</span><span class="s">@&quot;hello&quot;</span><span class="p">];</span>
</span><span class='line'> <span class="c1">// verify the method was called as expected</span>
</span><span class='line'> <span class="p">[</span><span class="n">niceMocking</span> <span class="n">verify</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OCMock3 新版本对应API</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">niceMockThing</span> <span class="o">=</span> <span class="n">OCMClassMock</span><span class="p">([</span><span class="n">Thing</span> <span class="n">class</span><span class="p">]);</span>
</span><span class='line'><span class="n">OCMVerify</span><span class="p">([</span><span class="n">niceMockThing</span> <span class="nl">greeting:</span><span class="s">@&quot;hello&quot;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当被验证的方法没有被调用的时候会抛出异常。如果你用的是XCTest，那么请用<code>XCTAssertNotThrow</code>来包装验证调用。拒绝方法调用也是同样的道理，但是会再方法调用的时候抛出异常。就像stub，selector和传递过去验证的参数必须匹配调用时候传递过去的参数。用<code>[OCMArg any]</code>可以简化我们的工作。</p>

<h4>处理block参数</h4>

<p>OCMock也可以处理block回调参数。block回调通常用于网络代码，数据库代码，或者在任何异步操作中。在这个例子中，思考下下面的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadWeatherDataForZip:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">zip</span>
</span><span class='line'>              <span class="nf">callback:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">response</span><span class="p">))</span><span class="nv">callback</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，我们有一个下载天气压缩数据的方法，并且把下载下来的dictionary代理到一个block的回调中。在测试中，我们通过预定义的天气数据来测试回调处理。这也是明智的测试失败场景。你永远不会知道网络上会返回你什么东西！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 1. stub using OCMock andDo: operator.</span>
</span><span class='line'><span class="p">[[[</span><span class="n">groupModelMock</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andDo:</span><span class="o">^</span><span class="p">(</span><span class="n">NSInvocation</span> <span class="o">*</span><span class="n">invoke</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//2. declare a block with same signature</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">weatherStubResponse</span><span class="p">)(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dict</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//3. link argument 3 with with our block callback</span>
</span><span class='line'>        <span class="p">[</span><span class="n">invoke</span> <span class="nl">getArgument:</span><span class="o">&amp;</span><span class="n">weatherStubResponse</span> <span class="nl">atIndex:</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//4. invoke block with pre-defined input</span>
</span><span class='line'>        <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">testResponse</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;high&quot;</span><span class="o">:</span> <span class="mi">43</span> <span class="p">,</span> <span class="s">@&quot;low&quot;</span><span class="o">:</span> <span class="mi">12</span><span class="p">};</span>
</span><span class='line'>        <span class="n">weatherStubResponse</span><span class="p">(</span><span class="n">groupMemberMock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]</span><span class="n">downloadWeatherDataForZip</span><span class="s">@&quot;80304&quot;</span> <span class="nl">callback:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OCMock3 新版本对应API</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 1. stub using OCMock andDo: operator.</span>
</span><span class='line'><span class="n">OCMStub</span><span class="p">([</span><span class="n">groupModelMock</span> <span class="nl">downloadWeatherDataForZip:</span><span class="s">@&quot;80304&quot;</span> <span class="nl">callback:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]]]).</span><span class="n">andDo</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="n">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//2. declare a block with same signature</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">weatherStubResponse</span><span class="p">)(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dict</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//3. link argument 3 with with our block callback</span>
</span><span class='line'>        <span class="p">[</span><span class="n">invoke</span> <span class="nl">getArgument:</span><span class="o">&amp;</span><span class="n">weatherStubResponse</span> <span class="nl">atIndex:</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//4. invoke block with pre-defined input</span>
</span><span class='line'>        <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">testResponse</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;high&quot;</span><span class="o">:</span> <span class="mi">43</span> <span class="p">,</span> <span class="s">@&quot;low&quot;</span><span class="o">:</span> <span class="mi">12</span><span class="p">};</span>
</span><span class='line'>        <span class="n">weatherStubResponse</span><span class="p">(</span><span class="n">groupMemberMock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的大体思想相当简单，即便如此，他的实现也需要一些说明：</p>

<pre><code>1.这个mock对象使用带NSInvocation参数的“andDo”方法。一个NSInvocation对象代表一个‘objectivetified’（实在不知道这个什么鬼）表现的方法调用。通过这个NSinvocation对象，使得拦截传递给我们的方法的block参数变得可能。
2.用与我们测试的方法中相同的方法签名声明一个block参数。
3.NSInvocation实例方法"getArgument:atIndex:"将赋值后的块函数传递都原始函数中定义的块函数中。注意：在Objective-C中，传递给任意方法的前两个参数都是“self”和“_cmd”.这是一个运行时的小功能以及用下标来获取NSInvocation参数时我们需要考虑的东西。
4.最后，传递这个回调的预定义字典。
</code></pre>

<h4>最后</h4>

<p>希望这篇文章和例子已经陈述清楚一些OCMock最通用的用法。OCMock站点：<a href="http://ocmock.org/features/">http://ocmock.org/features/</a>是一个最好的学习OCMock的地方。mock是单调的但是对于一个现代的OO系统却是必须的。如果一个依赖图很难用mock来测试，这个迹象表明你的设计需要重新考虑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS单元测试系列]单元测试框架选型]]></title>
    <link href="http://zixun.github.io/blog/2015/04/11/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/"/>
    <updated>2015-04-11T13:42:02+08:00</updated>
    <id>http://zixun.github.io/blog/2015/04/11/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing</id>
    <content type="html"><![CDATA[<p>这段时间在团队里一直在负责对单元测试的探索和落地，感觉有必要总结下自己这段时间的探索成果和大家分享。加之已经忙的很久没写博客了，感觉没有沉淀，这样不好。iOS单元测试系列会一直更新，按主题将我在单元测试探索和落地过程中的技术积累沉淀下来，也算是对自己这段时间的总结。部分观点是我个人观点，欢迎大家讨论。</p>

<p>一开始接到的不是单元测试的任务，而是与测试同学共建完成iOS上持续集成能跑测试用例的平台。然后我就吭哧吭哧的区研究Jenkins，后来发现不对，就算我把平台搭建好了没有测试用例也只是个空壳子，而应该合理分工，测试同学负责搭建平台，开发负责写测试用例。</p>

<!-- more -->


<h3>XCTest Or GHUnit</h3>

<p>写测试用例总得有个框架吧，现在比较流行的就属Apple自带的XCTest和第三方的GHUnit。我们来看看他两之间的区别。
XCTest：与Xcode深度集成。而且可以享受Apple后续对XCTest升级的福利。
GHUnit：集成度不如XCTest，安装麻烦。但是有自己的GUI界面。
貌似都各有所长，那么我们来看看Github上的一些知名的开源库都用的是什么测试框架吧。</p>

<p><img src="http://zixun.github.io/images/custom/post/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/danyuanceshi-1.jpg" alt="hello world" /></p>

<p>可以看到清一色的被XCTest刷屏了。也的确，GHUnit的GUI界面对我们来说没有什么特别大的意义。而XCTest血统纯正，背后站着东家Apple。而对于我们的选择也应该是XCTest，应该既然Github上又这么多XCTest的case例子可以参考，对我们的帮助肯定不言而喻。</p>

<h3>OCMock Or OCMockito</h3>

<p>这两个都是用来mock对象，stub方法的。<a href="https://github.com/erikdoe/ocmock">OCMock</a> 和 <a href="https://github.com/jonreid/OCMockito">OCMockito</a>个人感觉功能区别不大。他们之间的区别在于使用OCMock的库比OCMockito的库多，而且文档和教程更加丰富。大家可以打开<a href="http://ocmock.org/">OCMock官网</a>看一下。所以个人选择我选了OCMock作为我们的测试mock工具。</p>

<h3>Expecta Or OCHamcrest</h3>

<p><a href="https://github.com/specta/expecta">Expecta</a>和<a href="https://github.com/hamcrest/OCHamcrest">OCHamcrest</a>这两个都是断言的扩展框架。一开始我选择了Expecta，因为我后来有一段时间将测试文件用BDD框架Specta来写（当然这是后话），而Expecta 和Specta都出自同一个人之手，不论是教程文档都更加丰富。但是后来我废弃了BDD框架，还是用原生的XCTest，Expecta在使用中也遇到了一些问题，我就把我们的断言框架由Expecta切换到了OCHamcrest。</p>

<p>原因有两点：</p>

<pre><code>1.Expecta不成熟，至笔者切换的时候才0.3.1版本，遇到很多框架自身的问题。case跑着跑着验证通不过了，再跑一次又过了，是不是还爆出个Expecta框架内部的crash。
2.OCHamcrest更加成熟，而且可扩展性高，可以自定义自己的断言，更灵活。
</code></pre>

<p>比如OCHamcrest不支持superClass验证，我们必须自己去比较，返回一个bool值，然后去判断bool是否为真。很麻烦。自己自定义个superClass的验证，就不需要每次都这么麻烦的写这么多代码了。而如果Expecta不支持的断言，那就永远不能支持了。
我们可以通过OCHamcrest这个特性，做一些符合自己app场景的特有断言。</p>

<h3>BDD Or Not</h3>

<p>BDD的全称是Behavior Driven Development。也就是行为驱动开发。BDD确实让我眼前一亮。他能将测试语言写成类似自然语言。BDD的理念是你不是在写代码，而是在讲故事。而整个故事是由Given&hellip;When&hellip;Then组成。我们可以来看看BDD框架<a href="https://github.com/kiwi-bdd/Kiwi">Kiwi</a>的一段测试代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">@&quot;Team&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">context</span><span class="p">(</span><span class="s">@&quot;when newly created&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">it</span><span class="p">(</span><span class="s">@&quot;has a name&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">team</span> <span class="o">=</span> <span class="p">[</span><span class="n">Team</span> <span class="n">team</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">team</span><span class="p">.</span><span class="n">name</span> <span class="n">should</span><span class="p">]</span> <span class="nl">equal:</span><span class="s">@&quot;Black Hawks&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">it</span><span class="p">(</span><span class="s">@&quot;has 11 players&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">team</span> <span class="o">=</span> <span class="p">[</span><span class="n">Team</span> <span class="n">team</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[[[</span><span class="n">team</span> <span class="n">should</span><span class="p">]</span> <span class="nl">have:</span><span class="mi">11</span><span class="p">]</span> <span class="n">players</span><span class="p">];</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个测试用例就是在说<strong>Given a Team,When newly created,it should have a name, and should have 11 players</strong>。
的确很清晰，基本不需要注释就能知道在干嘛了。
既然BDD这么好，那么我们比较下BDD框架Kiwi和XCTest + OCMock组合的优劣吧。为什么是XCTest + OCMock而不是XCTest，因为Kiwi自带mock功能，而XCTest没有mock功能。</p>

<p><img src="http://zixun.github.io/images/custom/post/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/danyuanceshi-2.jpg" alt="danyuanceshi-2" /></p>

<p>可以看出Kiwi还是蛮诱人的。但是Kiwi的mock功能api远没有OCMock设计的好，尤其是OCMock3推出后，所以笔者想把Kiwi和OCMock一起用，结果这两个库存在不兼容性。一跑就挂。后来迁移到BDD另一个框架Specta，BDD的理念相同，所以语法也大同小异。Specta和Kiwi的区别就是Kiwi包含了Specta和OCmock以及Expeata所有的功能。换句话说Specta就是没有mock和验证功能的kiwi。但是想对来说，specta的API设计更加合理。</p>

<p><code>但是，高潮来了！后续我还是废弃了BDD，切换回XCTest，原因有很多。主要的原因是BDD框架hold不住业务的发展，BDD的讲故事理念在业务面前就是老太太的裹脚布，又臭又长！而且BDD需要一定的学习成本，不像XCTest这种类JUnit的对开发者更友好的代码。而且BDD的框架包装过深，可扩展性不高。还有就是BDD的框架普遍太年轻，bug相对较多，版本迭代太快。最最致命的是BDD的框架不能单个case单个跑，一跑所有的case全部跑一边这在平时写case 的时候是非常拖沓的！</code></p>

<h3>总结</h3>

<p>也没啥好总结的。一个个坑踩下来，最后的选择是XCTest + OCMock + OCHamcrest是我认为最好的框架方案。当然，这是我的个人观点~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<译>iOS 8 Today Extension Tutorial]]></title>
    <link href="http://zixun.github.io/blog/2014/10/22/%3Cyi-%3Eios-8-today-extension-tutorial/"/>
    <updated>2014-10-22T23:41:28+08:00</updated>
    <id>http://zixun.github.io/blog/2014/10/22/<yi->ios-8-today-extension-tutorial</id>
    <content type="html"><![CDATA[<p><strong>原文链接:</strong><a href="http://www.raywenderlich.com/83809/ios-8-today-extension-tutorial">iOS 8 Today Extension Tutorial</a></p>

<p><strong>Ray提醒: </strong> 这篇文章可以说是一个精简版，它是从<a href="http://www.raywenderlich.com/store/swift-tutorials-bundle">iOS8 by Tutirials</a>这本书中摘录的一个章节。<a href="http://www.raywenderlich.com/store/swift-tutorials-bundle">iOS8 by Tutirials</a>是我们<a href="http://www.raywenderlich.com/82230/introducing-ios-8-feast">iOS8 Feast</a>套餐中的一部分。通过这篇文章我们可以看到书中的内容是怎么样的。希望你喜欢！</p>

<p>iOS8介绍了一种新的概念 <code>App Extensions</code>:一种在操作系统上与其他应用共享应用程序功能的方式！</p>

<p>这些<code>Extensions</code>中有一种叫<code>Today Extensions</code>，又称<code>Widgets</code>。它可以让你在<code>Notification Center</code>中呈现信息。这是一种很好的方式向用户直接的提供他感兴趣的最新的信息。</p>

<p>在这个教程中，你会编写一个<code>Today Extension</code>用来渲染<a href="https://bitcoin.org/en/">bitcoin.org</a>中比特币基于美元的当前市场价格。</p>

<!-- more -->


<h2>介绍比特币</h2>

<p>如果你对比特币还不熟悉，那用一句很短的话来介绍的话就是比特币是一种还处于初期的数字加密货币。除了可以用来作P2P的交换和购买外，比特币交易还允许用户将比特币交易成另外一种数字加密货币，比如狗狗币和莱特币，以及像美金和欧元这样的常用货币。</p>

<h2>介绍Crypticker项目</h2>

<p>一旦你开始写一个<code>Extension</code>，你必须先需要一个<code>载体应用</code>（host app）来做扩展；看看<code>Crypticker</code>项目吧。</p>

<p><code>Crypticker</code>是用来展示当前的比特币价格、当前价格与昨日价格的区别和历史价格图表的一个简单的App。图表包括30天的历史价格；滑动你的手指可以看到过去特定的某天的准确价格。</p>

<p><code>Extension</code>会包含所有这些功能，除了点击图表可以看到特定某天的价格。<code>Today Extension</code>也有局限性，尤其是当它在滑动(<code>swipe</code>)的时候，<code>Swipe Gesture</code>总是在<code>Notification Center</code>中的<code>Today</code>和<code>Notifications</code>这两个<code>sections</code>里被触发，所以他没有真的做到提供了最好的或者最可靠的用户体验。</p>

<h2>入门指南</h2>

<p>我们从下载<a href="http://cdn4.raywenderlich.com/wp-content/uploads/2014/09/crypticker-swift-starter-GM.zip">Crypticker起始项目</a>入手。这个项目包含整个如上面描述的<code>Crypticker</code> app。我们的教程不会关注这个项目本身的开发，所以你愉快又惊讶的发现这个教程是如此的简洁。毕竟，你要写一个<code>Extension</code>，而不是整个app。
编译运行。请注意你需要一个可以工作的网络来链接<code>web service</code>以及拉取实时的价格。</p>

<p>(译者注：这个App还是Swift1.0的代码，可以根据Xcode的提示将代码修改成符合Swift1.1，主要是Swift1.1加入了可失败初始化功能)</p>

<p align="center">
    <img style="width:444px;height:788px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/CryptickerApp-1.png" >
</p>


<br/>


<p>App看起来非常像上面的屏幕截图；当然显示的数据是基于当前的比特币市场怎么样。触碰在底部附近的图表会绘制一条线以及显示遮天相关的价格。</p>

<h2>BTC Widget</h2>

<p>为了不熟悉的人更好的理解，BTC就是比特币的缩写。很像USD就代表美元。<code>Today Extension</code>会渲染出一个<code>Crypticker</code>主视图的缩小版本。</p>

<p>理论上，<code>Crypticker</code>有能力展示多种加密货币的价格，但是你的<code>Extension</code>是对BTC的特制版。因此，它的名字应该叫<code>BTC Widget</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Note: Extensions,就其本质而言，只有一个目的。如果你想要提供出你另一个数字加密货币的信息，比如狗狗币（Dogecoin），最好的方法是针对你的App打第二个widget的包或者适当的设计你的UI，也许就像股票Widget。</span></code></pre></td></tr></table></div></figure>


<p>在这篇教程的结尾，你的<code>Today Extension</code>会看起来像这样:</p>

<p align="center">
    <img style="width:275px;height:488px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-Widget-2.png" >
</p>


<br/>


<h3>添加一个Today Extension target</h3>

<p>所有的<code>Extention</code>被包装成一个和他们载体工程隔离的<code>binary</code>。所以你需要为你的<code>Crypticker</code>工程添加一个<code>Today Extention</code>的<code>target</code>。</p>

<p>在Xcode的<code>Project Navigator</code>中，选中<code>Crypticker project</code>，然后选择<code>Editor\Add Target…</code>来添加一个新的<code>target</code>。当模板选择器出现后，选择<code>iOS\ Application Extension</code>下的<code>Today Extension</code>。点击<code>Next</code>。</p>

<p align="center">
    <img style="width:700px;height:411px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/AddTarget-3-700x411.png" >
</p>


<br/>


<p>设置<code>Product Name</code>为<code>BTC Widget</code>，然后验证<code>Language</code>为<code>Swift</code>，<code>Project</code>为<code>Crypticker</code>，<code>Embed in Application</code>也是<code>Crypticker</code>。点击<code>Finish</code>。</p>

<p align="center">
    <img style="width:700px;height:413px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/AddTarget-4-700x413.png" >
</p>


<br/>


<p>当提示激活<code>BTC Widget``scheme</code>的时候.就像文本指示器一样，会为你创建另一个<code>Xcode``scheme</code>。</p>

<p>恭喜！现在<code>BTC Widget</code>会展示在你的<code>targets</code>的列表中。</p>

<p align="center">
    <img style="width:250px;height:250px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AddTarget-5-250x250.png" >
</p>


<br/>


<p>确保你选中了<code>BTC Widget</code>target，选择<code>General</code>标签，然后按下在<code>Linked Frameworks and Libraries</code>下的<code>+</code>按钮。</p>

<p align="center">
    <img style="width:480px;height:294px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-LinkFramework-6-480x294.png" >
</p>


<br/>


<p>选中<code>CryptoCurrencyKit.framework</code>然后点击<code>Add</code>。</p>

<p>CryptoCurrencyKit是一个在<code>Crypticker app</code>中使用的用来从网络上获取货币价格的自定义的<code>framework</code>。你很幸运，有个难以置信般善良和体贴的程序猿模块化了<code>Crypticker</code>的代码到<code>framework</code>，所以它可以在多个<code>target</code>下共享 :]</p>

<p>为了在载体工程和它的extensions质检共享代码，你必须使用自定义<code>framework</code>。如果你不这么做，你会发现你重复撰写了很多代码以及违反了软件工程中一个很重要的原则：<code>DRY- or，Dont Repeat Yourself</code>，我再说一次：<code>Dont Repeat Yourself</code>（不要重复发明轮子）</p>

<p>现在，你已经准备好开始实现<code>extension</code>了。</p>

<p>注意，现在有一个以你新的<code>target</code>命名的文件组在你项目的<code>Navigator</code>中，<code>BTC Widget</code>。这是<code>Today Extension</code>代码默认分组存放的地方。</p>

<p>展开这个文件组，你会看到这里有一个<code>view controller</code>，一个<code>storyboard</code>文件和一个<code>Info.plist</code>文件。它的<code>target</code>配置信息也告诉他去<code>MainInterface.storyboard</code>加载他的<code>interface</code>，<code>MainInterface.storyboard</code>包含一个指定class为 <code>TodayViewController.swift</code>的 <code>ViewController</code>。</p>

<p align="center">
    <img style="width:274px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-ListofFiles-7-274x320.png" >
</p>


<br/>


<p>你会发现有一些你期望看到的文件在<code>Today Extension</code>模板中却消失不见了。比如说<code>app delegate</code>。记住所有的Extension都运行在另外一个载体工程的内部，所以他们和传统的app的生命周期不一样。</p>

<p>本质上，Extension的生命周期是被映射在<code>TodayViewController</code>的生命周期上的。</p>

<p>打开<code>MainInterface.storyboard</code>。你会看到一个带着明亮的<code>Hello World``label</code>的深色的<code>View</code>。为了与通知中心的暗色调协调，当<code>Today Extension</code>有一个清晰透明的背景和一个明亮或者艳丽的文本时是最清晰易读的。</p>

<p>确保<code>BTC Widget</code>scheme在<code>Xcode</code>的<code>toolbar</code>中被选中，然后编译运行。这时会出现一个窗口来问你哪一个app需要运行。Xcode正在问你哪个载体应用需要运行。选择<code>Today</code>。这会告诉你的iOS打开通知中心的<code>Today</code>视图。它会依次展开你的<code>Widget</code>。</p>

<p align="center">
    <img style="width:349px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-PickAppToRun-8-349x320.png" >
</p>


<br/>


<p>这也会附加<code>Xcode</code>的调试器到<code>widget</code>的进程中。</p>

<p align="center">
    <img style="width:180px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-WidgetWithNothing-9-180x320.png" >
</p>


<br/>


<p>看你的插件，碉堡了，对不对?虽然这是一个超级刺激的东西，但<code>widget</code>也需要一点工作。是时候让它做一些有趣的事了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Note:你可能遇到在运行Widget的时候控制台打印出很多Auto Layout的错误。这是一个Xcode模板的问题，会有希望Apple在将来解决他。不要担心，大胆的添加AutoLayout约束到你的interface上。
</span><span class='line'>（译者注：个人感觉还是纯代码靠谱，清晰，一目了然，版本冲突成本低）</span></code></pre></td></tr></table></div></figure>


<h3>建立接口</h3>

<p>打开<code>MainInterface.storyboard</code>然后删除那个label。在<code>Size Inspector</code>中设置view的高为150pts，宽为320pts。从<code>Object Library</code>拖出一个<code>Button</code>，两个<code>Label</code>和一个<code>View</code>到你的<code>ViewController</code>的<code>view</code>上。</p>

<ul>
<li>将其中一个label放在左上角，在<code>Attributes Inspector</code>中设置他的<code>Text</code>为<code>$592.12</code>，<code>Color</code>为<code>Red: 66, Green: 145，Blue: 211</code>。这个label会用来显示当前的市场价格。</li>
<li>将另外一个label放在你刚刚设置的label的右边，但在右边留出一个button的空间。在<code>Attributes Inspector</code>中设置他的<code>Text</code>为<code>+1.23</code>，<code>Color</code>为<code>Red: 133, Green: 191, Blue: 371</code>。这个会哦你过来显示昨天和当前的价格的不同。</li>
<li>将button移动到视图的右上方。在<code>Attributes Inspector</code>中设置他的<code>Image</code>为<code>caret-notification-center</code>，删除他的<code>Title</code>。</li>
<li>最后，将空的view放在两个label和button的下面，拉伸它直到它的底部和边缘和<code>containing view</code>吻合，设置他的<code>Height</code>为<code>98</code>.在<code>Attributes Inspector</code>中设置他的<code>Background</code>为<code>Clear Color</code>，然后在<code>Identity Inspector</code>中设置他的<code>Class</code>为<code>JBLineChartView</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Note: 当你在打字的时候Xcode会猜测你可能输入的一个叫 JBLineChartDotView 的class，确保你选择了JBLineChartView</span></code></pre></td></tr></table></div></figure>


<p>现在视图和<code>Outline</code>看起来像这样：</p>

<p align="center">
    <img style="width:480px;height:183px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-DocumentOutline-10-480x183.png" >
</p>


<br/>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Note: 为了本书的清晰度的目的展示在这里的View是白色背景的。你的视图实际上会和通知中心一样有一个深色的背景色。</span></code></pre></td></tr></table></div></figure>


<p>不要担心页面的布局，你马上就会通过适当的定义布局来添加AutoLayout约束。</p>

<p>现在展开在<code>Project Navigator</code>的<code>Crypticker</code>组，选中<code>Images.xcassets</code>。在<code>File Inspector</code>中勾选<code>BTC Widget</code>将其添加到extension的target上。
这样Xcode就会将<code>Images.xcassets</code>从你的<code>Crypticker</code>target上添加到<code>BTC Widget</code>的target上；这是你的button使用的<code>caret-notification-center</code>图片存放的地方。如果你在载体app和widget上有重复的image assets，这是一个很好的共享方式。这可以通过不添加已经在使用的图片来减少App膨胀。</p>

<p align="center">
    <img style="width:480px;height:273px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AssetCatalog-11-480x273.png" >
</p>


<br/>


<p>返回到<code>MainInterface.storyboard</code>，打开<code>Assistant Editor</code>。确保<code>TodayViewController.swift</code>是它的active file。将下面的代码添加到<code>TodayViewController.swift</code>的顶部：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="no">CryptoCurrencyKit</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是用来导入CryptoCurrencyKit framework。
接下来，你需要像这样更新他的类声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TodayViewController</span><span class="p">:</span> <span class="no">CurrencyDataViewController</span><span class="p">,</span> <span class="no">NCWidgetProviding</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会让<code>TodayViewController</code>成为<code>CurrencyDataViewController</code>的一个子类，确保他符合<code>NCWidgetProviding</code>协议。</p>

<p><code>CurrencyDataViewController</code>是包含在<code>CryptoCurrencyKit</code>中也被<code>Crypticker</code>载体应用的第一个视图使用的Controller。由于Widget和App会通过UIViewController展示相似的信息，他会把可重用的组件放到一个superclass中，然后按不同的需求来做子类化。</p>

<p><code>NCWidgetProviding</code>是<code>Widget</code>特有的接口。有两个接口的方法需要你来实现。</p>

<p>按住<code>Ctrl</code>，从IB的Button拖动鼠标到类声明下。在弹出的对话框中确保<code>Connection</code>设置为<code>Outlet</code>，<code>Type</code>设置为<code>UIButton</code>，在<code>Name</code>中输入<code>toggleLineChartButton</code>后点击<code>Connect</code>。</p>

<p align="center">
    <img style="width:480px;height:192px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-WireToggleButton-480x192.png" >
</p>


<br/>


<p>然后还是按住Ctrl，这次从IB的Button拖动鼠标到类的底部。在弹出的对话框中改变<code>Connection</code>值为<code>Action</code>，设置<code>Type</code>为<code>UIButton</code>，在<code>Name</code>中输入<code>toggleLineChart</code>后点击<code>Connect</code>。</p>

<p align="center">
    <img style="width:480px;height:196px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-WireUpAction-480x196.png" >
</p>


<br/>


<p><code>TodayViewController</code>是<code>CurrencyDataViewController</code>的子类，<code>CurrencyDataViewController</code>有三个<code>outlet</code>：<code>price label</code>, <code>price change label</code> 和 <code>line chart view</code>。你现在需要把他们联通起来。在<code>Document Outline</code>中按住<code>Ctrl</code>，从<code>Today View Controller</code>拖拽到<code>price label</code>(设置他的text为$592.12).在弹出框中选中<code>priceLabel</code>来建立连接。对另外一个label也做重复的操作，选中弹出框中的<code>priceChangeLabel</code>.最后对 <code>Line Chart View</code>做同样的操作，在弹出框中选中<code>lineChartView</code>。</p>

<p align="center">
    <img style="width:480px;height:222px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-WiringMiscThingsUp-480x222.png" >
</p>


<br/>


<h3>Auto Layout</h3>

<p>为了你的Widget可以自适应，你就会需要对它设置<code>Auto Layout</code>的约束。iOS8有一个新的自适应布局的概念。大意是视图可以被设计成各自有一个单独的布局，并且这个布局可以在各种各样的屏幕大小上工作。视图被设计成可以在未来以及不知道材料的设备上都可以自适应。</p>

<p>其中一个你要添加的约束是用来显示和隐藏我们的图表以及用来帮助定义Widget整体的高度。通知中心会依赖于你定义的适当的高度来显示你的Widget。</p>

<p>选中$592.12这个label，然后选择<code>Editor\Size to Fit Content</code>。如果<code>Size to Fit Content</code>选项不在你的菜单中，取消选中这个label，然后再次选中重试一遍。Xcode有的时候会抽风。接下来，使用在storyboard画布下的<code>Pin</code>按钮。分别钉住<code>Top</code>和<code>Leading</code>的空间为8和16。确保<code>Constrain to margins</code>处于关闭状态。</p>

<p align="center">
    <img style="width:208px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-1-208x320.png" >
</p>


<br/>


<p>现在选中+1.23这个label，再次选中<code>Editor\Size to Fit Content</code>。然后使用<code>Pin</code>按钮，钉住<code>Top</code>和<code>Trailing</code>空间都为8.</p>

<p align="center">
    <img style="width:209px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-2-209x320.png" >
</p>


<br/>


<p>选中那个Button，使用<code>Pin</code>按钮，钉住他的<code>Top</code>和<code>Trailing</code>两个的空间为0，以及他的Button空间为8。再钉住他的<code>Width</code>和<code>Height</code>都为44.确保<code>Constrain to margins</code>处于关闭状态。</p>

<p align="center">
    <img style="width:206px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-3-206x320.png" >
</p>


<br/>


<p>你需要减小Button的底部空间约束的优先级。选中button，然后打开<code>Size Inspector</code>, 定位到<code>Bottom Space to</code>：约束列表的约束，点击<code>Edit</code>然后改变他的<code>Priority</code>为250.</p>

<p>通过降低优先级你被<code>Auto Layout</code>系统允许打破他认为必要的约束。250是一个被设置给所有的约束优先级的默认以及必须的且碰巧小于1000的任意值。在折叠状态下这个约束需要被打破。通过设置不同优先级的约束你暗示系统当发生冲突的时候哪一个约束最先或者最后打破。</p>

<p align="center">
    <img style="width:480px;height:303px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-4-480x303.png" >
</p>


<br/>


<p>最后，选中<code>Line Chart View</code>。使用<code>Pin</code>按钮，钉住他的<code>Leading</code>, <code>Trailing</code>和<code>Bottom</code>三个空间为0以及他的高度为98。</p>

<p align="center">
    <img style="width:209px;height:320px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-5-209x320.png" >
</p>


<p>从<code>Document Outline</code>中选中视图控制器的View，然后选择<code>Editor\Resolve Auto Layout Issues\All Views\Update Frames</code>.这会通过更新视图的frame来匹配他们的约束，从而修复在画布上的任何<code>Auto Layout</code>的警告。如果<code>Update Frames</code>不可用，那么你的一切都狠完美，这是不必要的运行。</p>

<p>完成了你的所有的约束后，最后一步就是为<code>Line Chart View</code>的高度创建一个outlet的约束。在<code>Document Outline</code>中找到<code>Line Chart View</code>然后点击显示的三角形。</p>

<p>然后点击三角形，找到我们需要的高度约束。选中他，然后按住Ctrl，拖拽到 <code>Assistant Editor</code>，放在其他outlet的下面。在弹出框中确保<code>Connection</code>被设置为<code>Outlet</code>，在<code>Name</code>中输入<code>lineChartHeightConstraint</code>。点击<code>Connect</code>。</p>

<p align="center">
    <img style="width:480px;height:190px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-AutoLayout-6-480x190.png" >
</p>


<h3>实现TodayViewController.swift</h3>

<p>现在接口已经确立了，而且所有的东西都已经连接上，在<code>Standard Editor</code>中打开 <code>TodayViewController.swift</code>。
你会发现你在与一个普通的UIViewController的子类打交道。很欣慰，对不对？一会儿后你会遇到<code>NCWidgetProviding</code>协议中的一个叫做<code>widgetPerformUpdateWithCompletionHandler</code>的方法。在这个教程的结尾你会学到更多与它相关的东西。</p>

<p>这个<code>ViewController</code>主要负责显示当前的价格，价格的区别，响应button的点击和在line chart中显示价格的历史。</p>

<p>在<code>TodayViewController</code>的顶部定义一个属性用来跟踪线形图（line chart）是否可见：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">lineChartIsVisible</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在用下面的实现替换掉<code>viewDidLoad()</code>的模板代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">super</span><span class="o">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="n">lineChartHeightConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lineChartView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">lineChartView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">priceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;--&quot;</span>
</span><span class='line'>  <span class="n">priceChangeLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;--&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法会做以下几件事情：</p>

<pre><code>1.设置线形图的height约束的约束值为0，所以线形图默认是hidden的。
2.设置线形图的dataSource和delegate为self。
3.设置一些占位文案在两个label上。
</code></pre>

<p>还是在<code>TodayViewController</code>中，添加如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidAppear</span><span class="p">(</span><span class="ss">animated</span><span class="p">:</span> <span class="no">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">super</span><span class="o">.</span><span class="n">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fetchPrices</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">error</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceLabel</span><span class="p">()</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceChangeLabel</span><span class="p">()</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceHistoryLineChart</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的<code>fetchPrices</code>方法是在<code>CurrencyDataViewController</code>中定义的，他是一个可以异步调用block。这个方法会向我们在这个教程开始的时候提到的<code>web-service</code>发送一个请求来获取比特币的价格信息。</p>

<p>在方法的实现块中更新所有的label和线形图。更新方法也在父类中为你定义好了。他们通过<code>fetchPrices</code>对需要的值做一个简单的检索以及合理的格式化后用来显示。</p>

<p>由于Widget的设计，你还需要实现<code>widgetMarginInsetsForProposedMarginInsets</code>方法用来提供自定义的 <code>margin insets</code>，添加如下代码到<code>TodayViewController</code>中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">widgetMarginInsetsForProposedMarginInsets</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">defaultMarginInsets</span><span class="p">:</span> <span class="no">UIEdgeInsets</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="no">UIEdgeInsets</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="no">UIEdgeInsetsZero</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Widget默认有一个很大的<code>left margin</code>，这在Apple很多的默认Widget上是恨明显的。如果你想要填充整个通知中心的宽度，你必须实现这个方法并且返回<code>UIEdgeInsetsZero</code>，他会把所有的边的<code>margin insets</code>都转化为0。</p>

<p>现在是时候看看你到目前为止都有些啥了。选中<code>BTC Widget</code>这个<code>Scheme</code>。编译运行。当app运行后提示的时候选择<code>Today</code>。</p>

<pre><code>*如果通知中心没有显示，那么在屏幕的顶部用手指向下滑动来激活它。
*如果Widget没有在通知中心显示，你需要通过编辑菜单来添加它。在今日视图的底部你会看到编辑按钮。点击按钮展开所有安装在系统中的Widget。在这里你可以随心所欲的enable, disable以及re-order他们。如果BTC Widget没有处于enable状态，则enable他。
</code></pre>

<p align="center">
    <img style="width:480px;height:164px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-Widget-Almost1-480x164.png" >
</p>


<p>屌爆了，有木有！你的Widget现在已经在通知中心实时的显示比特币的价格。但是你可能已经意识到了一个问题。按钮不能工作以及看不到线形图。</p>

<p align="center">
    <img style="width:480px;height:329px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-YUNO.png" >
</p>


<p>接下来，你要为你添加的button实现<code>toggleLineChart</code>方法，用来展开widget的视图并且显示线形图。就像方法名说的一样，这个button就像一个转换键一样；他也会折叠视图从而隐藏图表。</p>

<p>用下面的代码替换空的<code>toggleLineChart</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">toggleLineChart</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">lineChartIsVisible</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lineChartHeightConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">transform</span> <span class="o">=</span> <span class="no">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">toggleLineChartButton</span><span class="o">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>
</span><span class='line'>    <span class="n">lineChartIsVisible</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lineChartHeightConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">98</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">transform</span> <span class="o">=</span> <span class="no">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="no">CGFloat</span><span class="p">(</span><span class="mi">180</span><span class="o">.</span><span class="mi">0</span> <span class="o">*</span> <span class="no">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">toggleLineChartButton</span><span class="o">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>
</span><span class='line'>    <span class="n">lineChartIsVisible</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法用来操纵线形图的高度约束，从来约束他的显示。它也对button有一个旋转变化，所有它可以准确的反应出图表的可见度。</p>

<p>约束更新后，你必须重新加载图表的数据，以便它在新的约束上重新绘制。</p>

<p>你会在<code>viewDidLayoutSubviews</code>上做这些。添加如下代码到<code>TodayViewController</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">super</span><span class="o">.</span><span class="n">viewDidLayoutSubviews</span><span class="p">()</span>
</span><span class='line'>  <span class="n">updatePriceHistoryLineChart</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>确保BTC Widget这个scheme被选中。编译运行。当App运行的时候出现提示就选择<code>Today</code>。</p>

<p>在左图，你会看到当图表隐藏的时候widget是如何展示的。在右图，你会看到当图表打开时widget是如何展示的。不是很寒酸！</p>

<p align="center">
    <img style="width:480px;height:144px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-Widet-Almost2-480x144.png" >
</p>


<p>添加如下代码到<code>TodayViewController</code>，你会拥有一个快速更新的线颜色以及目光尖锐的widget：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">lineChartView</span><span class="p">(</span><span class="ss">lineChartView</span><span class="p">:</span> <span class="no">JBLineChartView</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>  <span class="n">colorForLineAtLineIndex</span> <span class="ss">lineIndex</span><span class="p">:</span> <span class="no">UInt</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">UIColor</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="no">UIColor</span><span class="p">(</span><span class="ss">red</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">17</span><span class="p">,</span> <span class="ss">green</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">blue</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">82</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>确保当前的scheme依旧选中，编译运行。当app运行的时候出现提示就选择<code>Today</code>。</p>

<p align="center">
    <img style="width:480px;height:286px;" src="http://zixun.github.io/images/custom/post/ios-8-today-extension-tutorial/BTC-Widet-Done-480x286.png" >
</p>


<p>你最后要做的就是通过允许系统来创建一个快照，当屏幕关闭的时候添加对Widget更新视图的支持。系统会定期的帮助你的widget保持最新。</p>

<p>用下面的代码替换掉<code>widgetPerformUpdateWithCompletionHandler</code>现存的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">widgetPerformUpdateWithCompletionHandler</span><span class="p">(</span><span class="ss">completionHandler</span><span class="p">:</span> <span class="p">((</span><span class="no">NCUpdateResult</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Void</span><span class="p">)</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fetchPrices</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">error</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceLabel</span><span class="p">()</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceChangeLabel</span><span class="p">()</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">updatePriceHistoryLineChart</span><span class="p">()</span>
</span><span class='line'>      <span class="n">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="n">NewData</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="n">NoData</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法做以下几件事情：</p>

<pre><code>*他通过调用fetchPrices来从网络服务中获取当前的价格数据。
*如果没有错误，接口就会更新数据。
*最后 - 就像NCWidgetProviding协议要求的一样 - 方法调用系统提供的带着.NewData枚举的block。
*发生错误的时候，block会带着.Failed枚举调用。这会告诉系统没有新的可用的数据，用现存的快照吧，亲！
</code></pre>

<p>你可以在<a href="http://cdn3.raywenderlich.com/wp-content/uploads/2014/09/crypticker-swift-final-GM.zip">这里</a>下载最后的工程.</p>

<h3>现在去干哈</h3>

<p>iOS8通知中心是你自己个人的<code>playground</code>！Widget在一些其他的手机操作系统上早就已经有了，Apple最终提供给你一个创造他们的能力。</p>

<p>作为一个有进取心的开发者，你可能想要再看看你现在的app，思考怎么用widget去提升他们。利用widget的可能性更进一步想象新的app的idea。</p>

<p>如果你喜欢学习更多关于创建其他类型的iOS8的App扩展。看看我们的书 <a href="http://www.raywenderlich.com/?page_id=74805">iOS 8 by Tutorials</a>，这里你可以学习关于<code>Photo Extensions</code>, <code>Share Extensions</code>, <code>Action Extensions</code>以及更多的知识。</p>

<p>我们迫不及待的想看你能想出什么东西来了，希望你的Widget尽快的在我们的通知中心的顶部！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Swift实现一个具有类似UITableView中Cell重用机制的横向滚动控件]]></title>
    <link href="http://zixun.github.io/blog/2014/10/14/yong-swiftshi-xian-%5B%3F%5D-ge-ju-you-lei-si-uitableviewzhong-cellzhong-yong-ji-zhi-de-heng-xiang-gun-dong-kong-jian/"/>
    <updated>2014-10-14T17:30:39+08:00</updated>
    <id>http://zixun.github.io/blog/2014/10/14/yong-swiftshi-xian-[?]-ge-ju-you-lei-si-uitableviewzhong-cellzhong-yong-ji-zhi-de-heng-xiang-gun-dong-kong-jian</id>
    <content type="html"><![CDATA[<p>这篇文章源于对一个可横向滚动并选择的类目控件的重构。最近在学<code>Swift</code>，所以把这个控件的核心逻辑（Cell重用）用<code>Swift</code>重写出来分享给大家。当然这不是Apple官方的Cell重用机制，因为Apple不开源.这篇文章应该会对正在学习<code>Swift</code>并且想了解Cell重用实现的同学有一定帮助。文章中涉及到的代码都放在了Github(<a href="https://github.com/zixun/ZXOptionBar-Swift">ZXOptionBar-Swift</a>),欢迎大家提issues，求血求虐求羞辱~</p>

<p>第一个版本中这个控件承载了数据、视图、动画等所有的逻辑，使得这个控件在后期变得很难维护。所以我必须重构这个控件，而想到<code>UITableView</code>也是一个可滚动可选择的控件，我为什么不把它做成一个类似<code>UITableView</code>一样的横向滚动的控件呢。通过<code>delegate</code>和<code>dataSource</code>把数据和动画从控件中分离出来，通过cell重用减小cell初始化的开支。</p>

<p>可是，Apple的<code>UIKit</code>不开源啊，怎么办呢？twitter为我们提供了很好的参考，那就是<a href="https://github.com/twitter/twui">TWUI</a>,这是twitter当年在MacOS上实现的类似<code>UIKit</code>的一个库，虽然已经2年没有更新了，但是里面还是有不少可以挖掘的好东西，比如Twitter版的<code>UITabelView</code>的Cell重用机制。</p>

<p><code>UITableView</code>是分很多<code>section</code>的，但是横向滚动的控件一般只会有一种Cell，不会像<code>UITableView</code>一样需要分很多不同种类的Cell，所以我们可以改造<a href="https://github.com/twitter/twui">TWUI</a>的Cell重用机制，使它更适合横向滚动的视图控件。</p>

<p><strong>Note:</strong>之前在团队内部做过一个这个控件的Cell重用的分享，用Keynote演示，不过是用Objective-C描述的，对于理解上会有帮助。Keynote文件也在Github上。</p>

<!-- more -->


<h1>设计分析</h1>

<ul>
<li>需要通过<code>delegate</code>设计模式将数据和视图分离</li>
<li>需要用继承自<code>UIScrollView</code>的类来处理类似<code>UITableView</code>的逻辑(<code>ZXOptionBar</code>)</li>
<li>需要用继承自<code>UIView</code>的类来处理类似<code>UITableViewCell</code>的逻辑(<code>ZXOptionBarCell</code>)</li>
<li><code>ZXOptionBar</code>中需要一个容器来存放可以重用的Cell</li>
<li><code>ZXOptionBarCell</code>中需要一个容器来存放当前显示的Cell</li>
<li>使用<code>layoutSubviews()</code>方法来处理Cell重用逻辑</li>
<li>需要的工具方法:

<ul>
<li>计算可见区域Rect <code>visibleRect()</code></li>
<li>计算可见的Cell的下标index <code>indexsForVisibleColumns()</code></li>
<li>计算指定区域Rect下的Cell的下标index <code>indexsForColumnInRect()</code></li>
<li>计算指定下标的Cell的Rect大小 <code>rectForColumnAtIndex()</code></li>
</ul>
</li>
</ul>


<h1>核心实现</h1>

<h2>通过delegate设计模式分离数据与视图</h2>

<p>使用过<code>UITableView</code>的同学肯定知道，我们在使用<code>UITableView</code>的时候都是通过它的delegate和dataSource的代理方法将数据告诉我们的<code>UITableView</code>。<code>ZXOptionBar</code>也可以通过这样的方式将我们的数据和视图分离：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="o">-</span> <span class="no">ZXOptionBarDataSource</span>
</span><span class='line'><span class="n">protocol</span> <span class="ss">ZXOptionBarDataSource</span><span class="p">:</span> <span class="no">NSObjectProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">numberOfColumnsInOptionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">cellForColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">ZXOptionBarCell</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="o">-</span> <span class="no">ZXOptionBarDelegate</span>
</span><span class='line'><span class="vi">@objc</span> <span class="n">protocol</span> <span class="ss">ZXOptionBarDelegate</span><span class="p">:</span> <span class="no">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Display</span> <span class="n">customization</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">willDisplayCell</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">ZXOptionBarCell</span><span class="p">,</span> <span class="n">forColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">didEndDisplayingCell</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">ZXOptionBarCell</span><span class="p">,</span> <span class="n">forColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Variable</span> <span class="n">height</span> <span class="n">support</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">widthForColumnsAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Float</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span><span class="no">Select</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">didSelectColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">didDeselectColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span><span class="no">Reload</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBarWillReloadData</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">func</span> <span class="n">optionBarDidReloadData</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在ZXOptionBar中声明两个变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="ss">Mark</span><span class="p">:</span> <span class="no">Var</span>
</span><span class='line'><span class="n">weak</span> <span class="n">var</span> <span class="ss">barDataSource</span><span class="p">:</span> <span class="no">ZXOptionBarDataSource</span><span class="p">?</span>
</span><span class='line'><span class="n">weak</span> <span class="n">var</span> <span class="ss">barDelegate</span><span class="p">:</span> <span class="no">ZXOptionBarDelegate</span><span class="p">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且在初始化方法中对其赋值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="no">Method</span>
</span><span class='line'><span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="ss">frame</span><span class="p">:</span> <span class="no">CGRect</span><span class="p">,</span> <span class="ss">barDelegate</span><span class="p">:</span> <span class="no">ZXOptionBarDelegate</span><span class="p">,</span> <span class="ss">barDataSource</span><span class="p">:</span><span class="no">ZXOptionBarDataSource</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="ss">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">delegate</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">barDataSource</span> <span class="o">=</span> <span class="n">barDataSource</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">barDelegate</span> <span class="o">=</span> <span class="n">barDelegate</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>心细的同学可能已经发现了，delegate和dataSource为什么在初始化方法里赋值啊，我记得 <code>UITableView</code>不是这样子的，一定是我打开的方式不对！限于这已经超出本文的范畴，想深入了解的可以看看Matt大神的<a href="http://mattgemmell.com/api-design/">API Design</a>,可以看看文中的<strong>Rule 3: Required settings should be initializer parameters</strong>,不过我建议大家花点时间全文阅读一遍，肯定受益匪浅！</p>

<h2>Cell重用逻辑实现</h2>

<h3>定义容器类</h3>

<p>通过上面的办法我们可以把数据从我们的控件中分离出去，接下去就是最激动人心的时候了，我们需要实现我们的Cell重用的逻辑。
首先，我们申明两个Dictionary的容器类，一个用来存放可重用的Cell，一个用来存放当前屏幕显示的Cell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="no">Private</span> <span class="no">Var</span>
</span><span class='line'><span class="kp">private</span> <span class="n">var</span> <span class="ss">reusableOptionCells</span><span class="p">:</span> <span class="no">Dictionary</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="no">NSMutableArray</span><span class="o">&gt;!</span>
</span><span class='line'><span class="kp">private</span> <span class="n">var</span> <span class="ss">visibleItems</span><span class="p">:</span> <span class="no">Dictionary</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="no">ZXOptionBarCell</span><span class="o">&gt;!</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然别忘了在我们的<code>convenience</code> <code>init</code> 方法中对其赋值，这里我就不一一贴代码了，大家可以在我的Github上的<a href="https://github.com/zixun/ZXOptionBar-Swift">ZXOptionBar-Swift</a>库自行下载代码对应这边博客阅读，这里只贴一些核心的关键代码。</p>

<h3>重写layoutSubviews()</h3>

<p><code>layoutSubviews()</code>填塞所有Cell重用的逻辑，所以我们可以将一些独立模块的逻辑先抽离出来成一个个独立方法，读者可以先看看源码中以下几个方法先熟悉以下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">visibleRect</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="no">CGRect</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="err">计算可见区域</span><span class="no">Rect</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">indexsForVisibleColumns</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="err">计算可见的</span><span class="no">Cell</span><span class="err">的下标</span><span class="n">index</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">indexsForColumnInRect</span><span class="p">(</span><span class="ss">rect</span><span class="p">:</span> <span class="no">CGRect</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="err">计算指定区域</span><span class="no">Rect</span><span class="err">下的</span><span class="no">Cell</span><span class="err">的下标</span><span class="n">index</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kp">private</span> <span class="n">func</span> <span class="n">rectForColumnAtIndex</span><span class="p">(</span><span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">CGRect</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="err">计算指定下标的</span><span class="no">Cell</span><span class="err">的</span><span class="no">Rect</span><span class="err">大小</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，咱先来分析分析我们的逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">左滑前可见</span><span class="no">Cell</span><span class="err">的</span><span class="ss">index</span><span class="p">:</span>            <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span>
</span><span class='line'><span class="err">左滑后可见</span><span class="no">Cell</span><span class="err">的</span><span class="ss">index</span><span class="p">:</span>                <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span>
</span><span class='line'><span class="err">需要删除的</span><span class="no">Cell</span><span class="err">的</span><span class="ss">index</span><span class="p">:</span>            <span class="mi">0</span> <span class="mi">1</span>
</span><span class='line'><span class="err">需要添加的</span><span class="no">Cell</span><span class="err">的</span><span class="ss">index</span><span class="p">:</span>                            <span class="mi">8</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p><img style="position:absolute; left:50%; margin-left:-375px;" src="http://zixun.github.io/images/custom/post/cell.png" >
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br></p>

<p>这样我们就可以发现我们需要计算的信息了:</p>

<ul>
<li>滑动前老的可见的Cell的index(<code>oldVisibleIndex</code>);</li>
<li>滑动后新的可见的Cell的index(<code>newVisibleIndex</code>);</li>
<li>需要删除的Cell的index(<code>indexsToRemove</code>);</li>
<li>需要添加的Cell的index(<code>indexsToAdd</code>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="ss">oldVisibleIndex</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">indexsForVisibleColumns</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="ss">newVisibleIndex</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">indexsForColumnInRect</span><span class="p">(</span><span class="n">visible</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="ss">indexsToRemove</span><span class="p">:</span> <span class="no">NSMutableArray</span> <span class="o">=</span> <span class="no">NSMutableArray</span><span class="p">(</span><span class="ss">array</span><span class="p">:</span> <span class="n">oldVisibleIndex</span><span class="p">)</span>
</span><span class='line'><span class="n">indexsToRemove</span><span class="o">.</span><span class="n">removeObjectsInArray</span><span class="p">(</span><span class="n">newVisibleIndex</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="ss">indexsToAdd</span><span class="p">:</span> <span class="no">NSMutableArray</span> <span class="o">=</span> <span class="no">NSMutableArray</span><span class="p">(</span><span class="ss">array</span><span class="p">:</span> <span class="n">newVisibleIndex</span><span class="p">)</span>
</span><span class='line'><span class="n">indexsToAdd</span><span class="o">.</span><span class="n">removeObjectsInArray</span><span class="p">(</span><span class="n">oldVisibleIndex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们要做的就是将滚动出屏幕的Cell删除掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="n">delete</span> <span class="n">the</span> <span class="n">cells</span> <span class="n">which</span> <span class="n">frame</span> <span class="n">out</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">indexsToRemove</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">ZXOptionBarCell</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">cellForColumnAtIndex</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">indexFromIdentifyKey</span><span class="p">(</span><span class="n">i</span> <span class="n">as</span> <span class="nb">String</span><span class="p">))</span><span class="o">!</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">enqueueReusableCell</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cell</span><span class="o">.</span><span class="n">removeFromSuperview</span><span class="p">()</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">visibleItems</span><span class="o">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">i</span> <span class="n">as</span> <span class="nb">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
<code>enqueueReusableCell()</code>方法就是将滚出屏幕的Cell放到我们的重用Cell容器中(<code>reusableOptionCells</code>),具体实现可以看工程源码。</p>

<p>最后就是将进入屏幕的Cell添加进来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="n">add</span> <span class="n">the</span> <span class="kp">new</span> <span class="n">cell</span> <span class="n">which</span> <span class="n">frame</span> <span class="k">in</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">indexsToAdd</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="ss">indexToAdd</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">indexFromIdentifyKey</span><span class="p">(</span><span class="n">i</span> <span class="n">as</span> <span class="nb">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">ZXOptionBarCell</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">barDataSource!</span><span class="o">.</span><span class="n">optionBar</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">cellForColumnAtIndex</span><span class="p">:</span> <span class="n">indexToAdd</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">rectForColumnAtIndex</span><span class="p">(</span><span class="n">indexToAdd</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">zPosition</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">setNeedsDisplay</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">prepareForDisplay</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">indexToAdd</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">.</span><span class="n">selected</span> <span class="o">=</span> <span class="p">(</span><span class="n">indexToAdd</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">selectedIndex</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">barDelegate!</span><span class="o">.</span><span class="n">respondsToSelector</span><span class="p">(</span><span class="no">Selector</span><span class="p">(</span><span class="s2">&quot;optionBar:willDisplayCell:forColumnAtIndex:&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">barDelegate!</span><span class="o">.</span><span class="n">optionBar!</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">willDisplayCell</span><span class="p">:</span> <span class="n">cell</span><span class="p">,</span> <span class="ss">forColumnAtIndex</span><span class="p">:</span> <span class="n">indexToAdd</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">visibleItems</span><span class="o">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="ss">forKey</span><span class="p">:</span> <span class="p">(</span><span class="n">i</span> <span class="n">as</span> <span class="nb">String</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们通过dataSource的 <code>cellForColumnAtIndex</code>和delegate的<code>willDisplayCell</code>来实现cell的构建和delegate的通知。</p>

<h3>对外接口使用</h3>

<p>这样我们就可以像使用UITableView一样使用我们的ZXOptionBar：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="no">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="no">UIViewController</span><span class="p">,</span><span class="no">ZXOptionBarDelegate</span><span class="p">,</span><span class="no">ZXOptionBarDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">internal</span> <span class="n">var</span> <span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">?</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="o">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="n">optionBar</span> <span class="o">=</span> <span class="no">ZXOptionBar</span><span class="p">(</span><span class="ss">frame</span><span class="p">:</span> <span class="no">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="no">UIScreen</span><span class="o">.</span><span class="n">mainScreen</span><span class="p">()</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="ss">barDelegate</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">barDataSource</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">optionBar!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="o">-</span> <span class="no">ZXOptionBarDataSource</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">numberOfColumnsInOptionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">20</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">cellForColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">ZXOptionBarCell</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">CustomOptionBarCell</span><span class="p">?</span> <span class="o">=</span> <span class="n">optionBar</span><span class="o">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s2">&quot;ZXOptionBarDemo&quot;</span><span class="p">)</span> <span class="n">as?</span> <span class="no">CustomOptionBarCell</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span> <span class="o">=</span> <span class="no">CustomOptionBarCell</span><span class="p">(</span><span class="ss">style</span><span class="p">:</span> <span class="o">.</span><span class="n">ZXOptionBarCellStyleDefault</span><span class="p">,</span> <span class="ss">reuseIdentifier</span><span class="p">:</span> <span class="s2">&quot;ZXOptionBarDemo&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cell!</span><span class="o">.</span><span class="n">textLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;Bra-\(index)&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cell!</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span> <span class="ss">MARK</span><span class="p">:</span> <span class="o">-</span> <span class="no">ZXOptionBarDelegate</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">widthForColumnsAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Float</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">60</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">optionBar</span><span class="p">(</span><span class="ss">optionBar</span><span class="p">:</span> <span class="no">ZXOptionBar</span><span class="p">,</span> <span class="n">willDisplayCell</span> <span class="ss">cell</span><span class="p">:</span> <span class="no">ZXOptionBarCell</span><span class="p">,</span> <span class="n">forColumnAtIndex</span> <span class="ss">index</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cellForColumnAtIndex</code>其实和<code>UITableView</code>的<code>cellForColumnAtIndex</code>类似，都会调用一个叫<code>dequeueReusableCellWithIdentifier</code>的接口，这个接口会问存放重用Cell的容器<code>reusableOptionCells</code>有没有可以重用的Cell，有就给我，没有就返回nil，我让<code>cellForColumnAtIndex</code>自己新建一个，这样我们整个重用链就构建出来了：</p>

<ol>
<li>一开始重用Cell的容器<code>reusableOptionCells</code>是空的，所以所有的Cell都是新建的。</li>
<li>当有cell滑出屏幕的时候这个cell被放入<code>reusableOptionCells</code>中。</li>
<li>当有cell要滑入屏幕的时候就像<code>reusableOptionCells</code>要可重用的Cell，有就重用，没有就再新建一个。</li>
</ol>


<h2>写在最后</h2>

<p><strong>Note1:</strong>本篇文章只是抽离总结分享了一个OptionBar的核心功能（Cell重用和数据视图分离），读者可以根据自己应有的需要继承或者改写该类，添加新功能（比如：下标指示器indicator，indicator的样式，indicator的动画，类目选中动画之类的）。</p>

<p><strong>Note2:</strong>文章中只是罗列了核心代码，具体代码已放在Github上：<a href="https://github.com/zixun/ZXOptionBar-Swift">ZXOptionBar-Swift</a>，感兴趣的同学可以下载下来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS学习资料整理]]></title>
    <link href="http://zixun.github.io/blog/2014/03/06/iosxue-xi-zi-liao-zheng-li/"/>
    <updated>2014-03-06T19:24:23+08:00</updated>
    <id>http://zixun.github.io/blog/2014/03/06/iosxue-xi-zi-liao-zheng-li</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> 这篇文章主要用来收集自己在网上看到的不错的文章，并做归类整理，这篇文章会持续更新，确保每篇文章都是自己看过的，也可以当做是自己的学习资料。<br/><br/>
<strong>目录</strong> <br/></p>

<ul>
<li><p><a href="#iOS">iOS开发</a></p>

<ul>
<li><a href="#jiagou">架构设计</a></li>
<li><a href="#applewatch">Apple Watch</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#screen_adaptation">屏幕适配</a></li>
<li><a href="#application">工程</a></li>
<li><a href="#foundation">Foundation</a></li>
<li><a href="#rotation">旋转</a></li>
<li><a href="#category">Category</a></li>
<li><a href="#uikit">UIKit</a>

<ul>
<li><a href="#uiviewcontroller">UIViewController</a></li>
<li><a href="#uitableview">UITableView</a></li>
<li><a href="#uiactionSheet">UIActionSheet</a></li>
<li><a href="#uikitother">其他</a></li>
</ul>
</li>
<li><a href="#ios7">iOS7</a></li>
<li><a href="#ios8">iOS8</a>

<ul>
<li><a href="#appextension">App Extension</a></li>
</ul>
</li>
<li><a href="#memory">内存管理</a></li>
<li><a href="#block">Block</a></li>
<li><a href="#gcd">GCD</a></li>
<li><a href="#graphics&amp;animation">绘图&amp;动画</a></li>
<li><a href="#runtime">runtime</a></li>
<li><a href="#c-language">c语言</a></li>
<li><a href="#uplevel">代码优化</a></li>
<li><a href="#debug">调试</a></li>
<li><a href="#vender">第三方库使用</a></li>
<li><a href="#analyze">底层分析</a></li>
<li><a href="#storyBoard">StoryBoard</a></li>
<li><a href="#reverse">逆向</a></li>
<li><a href="#interview">面试</a></li>
<li><a href="#tools">工具</a></li>
<li><a href="#xiaojiqiao">技巧</a></li>
<li><a href="#blog">博客</a></li>
<li><a href="#periodical">期刊</a></li>
</ul>
</li>
<li><p><a href="#else">其他</a></p>

<ul>
<li><a href="#uidesign">UI设计</a>

<ul>
<li><a href="#sketch">Sketch</a></li>
</ul>
</li>
<li><a href="#markdown">Markdown</a></li>
</ul>
</li>
</ul>


<br/>


<!-- more -->




<h1 id="jiagou">架构设计</h1>


<ul>
<li><p><a href="http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html">iOS应用架构谈 开篇</a> by Casa Taloyum</p></li>
<li><p><a href="http://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html">iOS应用架构谈 view层的组织和调用方案</a> by Casa Taloyum</p></li>
<li><p><a href="http://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-yi-ji-cheng.html">跳出面向对象思想(一) 继承</a> by Casa Taloyum</p></li>
<li><p><a href="http://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-er-duo-tai.html">跳出面向对象思想(二) 多态</a> by Casa Taloyum</p></li>
<li><p><a href="http://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-san-feng-zhuang.html">跳出面向对象思想(三) 封装</a> by Casa Taloyum</p></li>
</ul>


<h1 id="iOS">iOS开发</h1>




<h2 id="applewatch">Apple Watch</h2>


<ul>
<li><p><a href="http://jerryliu.org/ios%20programming/Apple-Watch-Overview/">Apple Watch 开发调研一：总览</a> by Swift 小瑞的BLOG<br/></p></li>
<li><p><a href="http://jerryliu.org/ios%20programming/Apple%20Watch-WatchKit-Apps/">Apple Watch 开发调研二：WatchKit Apps</a> by Swift 小瑞的BLOG<br/></p></li>
<li><p><a href="http://jerryliu.org/ios%20programming/Apple%20Watch-Glances-Notifications/">Apple Watch 开发调研三: Glances,Notifications</a> by Swift 小瑞的BLOG<br/></p></li>
<li><p><a href="http://jerryliu.org/ios%20programming/Apple%20Watch-Development-summary/">Apple Watch三个月开发的一些收获总结</a> by Swift 小瑞的BLOG<br/></p></li>
</ul>


<h2 id="swift">Swift</h2>


<ul>
<li><p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/">The Swift Programming Language 中文版</a> by Swift 中文翻译组<br/></p></li>
<li><p><a href="http://www.cocoachina.com/special/swift/">CocoaChina Swift专场</a> by CocoaChina<br/></p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide">Swift语言指南</a> by ipader<br/></p></li>
<li><p><a href="http://swifter.tips/">喵神的Swift书~Tip列表</a> by onevcat<br/></p></li>
<li><p><a href="https://swiftist.org/">Swift论坛社区</a> by Swiftist<br/></p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/10/14/fp-essential/">( ) &ndash;> ( )</a> by sunnyxx<br/></p></li>
<li><p><a href="http://idlelife.org/archives/716">Swift如何检查系统版本</a> by <a href="http://idlelife.org">http://idlelife.org</a><br/></p></li>
<li><p><a href="http://idlelife.org/archives/742">我在开发第一个Swift App过程中学到的四件事</a> by <a href="http://idlelife.org">http://idlelife.org</a><br/></p></li>
</ul>


<h2 id="screen_adaptation">屏幕适配</h2>


<ul>
<li><p><a href="http://www.devtalking.com/articles/adaptive-layout-for-iphone6-1/">为iPhone6设计自适应布局（一）</a> by 宇轩<br/></p></li>
<li><p><a href="http://www.devtalking.com/articles/adaptive-layout-for-iphone6-2/">为iPhone6设计自适应布局（二）</a> by 宇轩<br/></p></li>
</ul>


<h2 id="application">工程</h2>


<ul>
<li><a href="http://www.cocoachina.com/ios/20140912/9605.html">iOS开发实战：如何将非ARC的项目转换成ARC项目</a> by CocoaChina<br/></li>
</ul>


<h2 id="foundation">Foundation</h2>


<ul>
<li><p><a href="http://beyondvincent.com/blog/2014/01/26/how-to-sort-nsarray-with-custom-objects/">对NSArray中自定义的对象进行排序</a> by破船<br/></p></li>
<li><p><a href="http://lldong.github.io/2014/02/24/key-paths-validation.html">Compile-time Key Paths Verification</a> by lldong<br/></p></li>
<li><p><a href="http://lldong.github.io/2012/11/06/hanzi-to-pinyin.html">Cocoa 漢字轉拼音最簡單的方法</a> by lldong<br/></p></li>
<li><p><a href="http://blog.xcodev.com/archives/ios-mmap-api/">iOS将大文件映射到内存</a> by xcodev</p></li>
<li><p><a href="http://www.isaced.com/post-244.html">用宏提速NSCoding</a> by isaced</p></li>
<li><p><a href="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/">Toll-Free Bridging</a> by Lancy</p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150512/11805.html">NSString属性什么时候用copy，什么时候用strong?</a> by 南峰子的技术博客<br/></p></li>
</ul>


<h2 id="rotation">旋转</h2>


<ul>
<li><a href="http://rdc.taobao.org/?p=408">iOS旋转视图实践</a> by淘宝技术部<br/></li>
<li><a href="http://blog.t-xx.me/blog/2014/01/19/force-rotate-uiviewcontroller/">强制旋转一个UIViewController</a> bytxx&rsquo;s blog<br/></li>
</ul>


<h2 id="category">Category</h2>


<ul>
<li><p><a href="http://www.cocoachina.com/applenews/devnews/2014/0212/7808.html">Objective-C相关Category的收集</a> by CocoaChina<br/></p></li>
<li><p><a href="http://blog.xcodev.com/archives/implement-objc-property-in-category/">Objective-C语言在Category中实现属性</a> by xcodev<br/></p></li>
</ul>


<h2 id="uikit">UIKit</h2>




<h4 id="uiviewcontroller">UIViewController</h4>


<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/">iOS5中UIViewController的新方法</a> by 唐巧<br/></li>
</ul>


<h4 id="uitableview">UITableView</h4>


<ul>
<li><p><a href="http://blog.cocoabit.com/blog/2014/02/09/uitableview-gun-dong-liu-cheng-xing-you-hua/">UITableView 滚动流畅性优化</a> by 6david9<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/01/13/animation-tableview-cell/">给tableview Cell添加动画</a> by 破船<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/03/26/cookbook-moving-table-view-cells-with-a-long-press-gesture/">利用长按手势移动 Table View Cells</a> by 破船<br/></p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-26-make-swipeable-table-view-cell-actions-without-going-nuts-scroll-views.md">制作一个可以滑动操作的 Table View Cell</a> by nixzhu<br/></p></li>
<li><p><a href="http://blog.xcodev.com/archives/cant-scroll-in-tableview/">TableView中嵌套一个ScrollView有时导致ScrollView无法滚动</a> by xcodev<br/></p></li>
</ul>


<h4 id="uiwebview">UIWebView</h4>


<ul>
<li><a href="http://blog.xcodev.com/archives/no-keyboard-in-webview-of-ios5/">iOS5网页视图（UIWebView）中的输入框不能弹出键盘的问题</a> by xcodev<br/></li>
</ul>


<h4 id="uiactionSheet">UIActionSheet</h4>


<ul>
<li><a href="http://blog.devtang.com/blog/2012/06/24/enhance-uiactionsheet/">封装同步的UIActionSheet</a> by 唐巧<br/></li>
</ul>


<h4 id="uikitother">其他</h4>


<ul>
<li><a href="http://beyondvincent.com/blog/2014/01/20/how-to-build-a-custom-control-in-ios/">如何自定义iOS中的控件</a> by 破船<br/></li>
</ul>


<h2 id="ios7">iOS7</h2>


<ul>
<li><p><a href="http://beyondvincent.com/blog/2014/01/29/ios-7-blur-effects-gpuimage/">iOS 7中实现模糊效果</a> by破船<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2013/11/19/122-working-with-ios-6-and-7/">iOS 7 教程：让程序同时支持iOS 6和iOS 7</a> by破船<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2013/11/12/121-brief-analysis-text-kit/">iOS 7 教程：浅析Text Kit</a> by破船<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2013/11/03/120-customize-navigation-status-bar-ios-7/">iOS 7 教程：定制iOS 7中的导航栏和状态栏</a> by破船<br/></p></li>
<li><p><a href="http://beyondvincent.com/blog/2013/09/20/112-ios-7-additions-omg-finally/">iOS 7中的一些小修改</a> by破船<br/></p></li>
<li><p><a href="http://nonomori.farbox.com/post/ios-7-jian-pan-dong-hua">iOS 7 键盘动画</a> by nonomori<br/></p></li>
</ul>


<h2 id="ios8">iOS8</h2>




<h4 id="appextension">App Extension</h4>


<ul>
<li><p><a href="http://foggry.com/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/">WWDC2014之App Extensions学习笔记</a> by foggry.com<br/></p></li>
<li><p><a href="http://www.raywenderlich.com/83809/ios-8-today-extension-tutorial">iOS 8 Today Extension Tutorial</a> by raywenderlich.com<br/></p></li>
<li><p><a href="http://zixun.github.io/blog/2014/10/22/%3Cyi-%3Eios-8-today-extension-tutorial/">&lt;译>iOS 8 Today Extension Tutorial</a> by zixun.github.io<br/></p></li>
</ul>


<h2 id="memory">内存管理</h2>


<ul>
<li><p><a href="http://onevcat.com/2012/06/arc-hand-by-hand/">手把手教你ARC——iOS/Mac开发ARC入门和使用</a> by onevcat<br/></p></li>
<li><p><a href="http://lldong.github.io/2011/10/20/retain-count.html">retainCount 不会为 0</a> by lldong<br/></p></li>
</ul>


<h2 id="block">Block</h2>


<ul>
<li><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">谈Objective-C Block的实现</a> by 唐巧<br/></li>
<li><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/">正确使用Block避免Cycle Retain和Crash</a> by tanqisen<br/></li>
</ul>


<h2 id="gcd">GCD</h2>


<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/">使用GCD</a> by 唐巧<br/></li>
<li><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md">GCD 深入理解：第一部分</a> by nixzhu<br/></li>
</ul>


<h2 id="graphics&animation">绘图&动画</h2>


<ul>
<li><p><a href="http://blog.xcodev.com/archives/anti-alise-for-image-ios/">在iOS中让图片旋转时抗锯齿</a> by xcodev&lt;br</p></li>
<li><p>[<a href="http://answerhuang.duapp.com/index.php/2013/10/17/objective-c_c99/">Objective C中C99的使用</a> by answerhuangbr/>
*</p></li>
</ul>


<h1 id="uplevel">代码优化</h1>


<ul>
<li><p><a href="http://blog.leezhong.com/ios/2014/01/04/class-cluster.html">类簇在iOS开发中的应用</a> by无网不剩<br/></p></li>
<li><p><a href="http://blog.leezhong.com/ios/2013/09/23/build-ios-application.html">iOS项目的目录结构和开发流程</a> by无网不剩<br/></p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/05/09/pop-tweaks/">Facebook Pop &amp; Tweaks Demo</a> by不会开机的男孩<br/></p></li>
</ul>


<h2 id="runtime">runtime</h2>


<ul>
<li><a href="http://blog.devwu.com/develop/2014-08-15/objcruntime-explore1/">objc/runtime 探索(一)</a><br/></li>
<li><a href="http://blog.devwu.com/develop/2014-08-17/objcruntime-explore2/">objc/runtime 探索(二))</a><br/></li>
<li><a href="http://blog.devwu.com/develop/2014-08-18/objcruntime-explore3/">objc/runtime 探索(三))</a><br/></li>
<li><a href="http://blog.devwu.com/develop/2014-08-19/objcruntime-explore4/">objc/runtime 探索(四))</a><br/></li>
<li><a href="http://www.jianshu.com/p/1bde36ad9938">轻松学习之一－－Objective-C消息转发</a> by J_雨<br/></li>
</ul>


<h2 id="c-language">c语言</h2>


<ul>
<li><a href="http://www.cnblogs.com/rollenholt/articles/1907414.html">什么情况下用宏定义do{}while(0);这种结构体</a><br/></li>
</ul>


<h2 id="debug">调试</h2>


<ul>
<li><a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/">LLDB调试命令初探</a> by 达叔<br/></li>
</ul>


<h2 id="vender">第三方库使用</h2>


<ul>
<li><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">在iOS开发中使用FMDB</a> by 唐巧<br/></li>
</ul>


<h2 id="analyze">底层分析</h2>


<ul>
<li><a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">Objective-C对象模型及应用</a> by 唐巧<br/></li>
</ul>


<h2 id="storyBoard">StoryBoard</h2>


<ul>
<li><a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">StoryBoard&mdash;看上去很美</a> by 唐巧<br/></li>
</ul>


<h2 id="reverse">逆向</h2>


<ul>
<li><a href="http://tweakweek.com/">TweakWeek</a> 每周一个开源tweek<br/></li>
<li><a href="http://developer.limneos.net/">iPhone 7.0 Headers</a><br/></li>
</ul>


<h2 id="interview">面试</h2>


<ul>
<li><a href="http://onevcat.com/2013/04/ios-interview/">上级向的十个iOS面试问题</a> by onevcat<br/></li>
</ul>


<h2 id="tools">工具</h2>


<ul>
<li><p><a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">使用CocoaPods来做iOS程序的包依赖管理</a> by 唐巧<br/></p></li>
<li><p><a href="http://blog.csdn.net/wzzvictory/article/details/20067595">CocoaPods详解之&mdash;&mdash;制作篇</a> by wangzz<br/></p></li>
<li><p><a href="http://girlios.github.io/blog/2014/03/16/enrolling-in-apple-developer-programs/">Enrolling in Apple Developer Programs</a> by Girl_iOS<br/></p></li>
</ul>


<h2 id="xiaojiqiao">技巧</h2>


<ul>
<li><p><a href="http://www.cocoachina.com/newbie/basic/2014/0225/7882.html">Xcode Key Bindings &amp; Gestures利用快捷键提高开发效率</a> by CocoaChina<br/></p></li>
<li><p><a href="http://www.gitignore.io/">www.gitignore.io/</a> by gitignore<br/>
这个网站可以自动为你生成gitignore文件，比如你输入Objective Xcode 就会为你生成正对iOS开发的gitignore文件，如果你对gitignore文件不熟，那就请翻阅&lt;Git权威指南>。</p></li>
<li><p><a href="http://www.douban.com/note/165306479/">Chrome 快捷键 整理版 【来自豆瓣】</a> by douban<br/></p></li>
<li><p><a href="http://segmentfault.com/a/1190000000475547">少有人知的 GitHub 使用技巧</a> by segmentfault<br/></p></li>
</ul>


<h2 id="pulgin">插件</h2>


<ul>
<li><p><a href="https://github.com/supermarin/Alcatraz">Alcatraz</a> by Github</br>
Alcatraz是一个帮你管理Xcode插件、模版以及颜色配置的工具。它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样.这里有一篇很好的介绍它的文章<a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">使用Alcatraz来管理Xcode插件</a>
</br></p></li>
<li><p><a href="https://github.com/omz/ColorSense-for-Xcode">ColorSense-for-Xcode</a> by Github<br/>
这个插件可以在编辑器上动态的渲染出你代码编写的颜色，例如在你写如下代码时它会在这段代码的右上角绘制出颜色预览，可以省去很多UI调整的时间</br>
<img style="position:absolute; left:50%; margin-left:-375px;" src="http://zixun.github.io/images/custom/post/ColorSense.png" ></p></li>
</ul>


<br/>


<ul>
<li><a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a> by Github<br/>
这个工具可以帮你自动补全image的图片信息，效果非常惊艳, 预览，自动补全，提示有无@2x高清图。</br></li>
</ul>


<p><img style="position:absolute; left:50%; margin-left:-271px;" src="http://zixun.github.io/images/custom/post/test.png" ></p>


<br/>


<br/>


<br/>


<br/>


<br/>


<br/>


<br/>




<h2 id="blog">博客</h2>


<ul>
<li><a href="http://girlios.github.io/">Girl_iOS</a>(萌妹子，iOS程序媛，下面的大牛博客很多都是摘自她的博客@Girl_iOS)</li>
<li><a href="http://blog.devtang.com/">唐巧</a>(InfoQ编辑，Blogger，iOS开发，创业者，前网易员工。微信公共账号iOSDevTips创建者。)</li>
<li><a href="http://beyondvincent.com/">破船</a>(宠辱不惊，闲看庭前花开花落。去留无意，漫随天外云卷云舒。不妄取，不妄予，不妄想，不妄求。与人方便，随遇而安)</li>
<li><a href="http://onevcat.com/">喵神</a> (iOS/Mac,Unity3D开发者，现就职于日本创意公司Kayac，正在修行，探求创意之源)</li>
<li><a href="http://nianxi.net/">念茜</a>(一单线程妞儿，iOS安全大牛)</li>
<li><a href="http://www.devtalking.com/">宇轩</a>(付宇轩，80后，程序员，关注技术和人文，记录学习的点点滴滴于《程序员说》)</li>
<li><a href="http://blog.cocoabit.com/">6david9</a>(iOS码农，攻城狮。喜欢各种有意思的东西。最近迷恋上了自行车。)</li>
<li><a href="http://blog.t-xx.me/">txx’s blog</a>(中山大学大四翘课熬夜党 广州贴贴信息科技技术总监 高度强迫症 代码洁癖的 iOS开发者)</li>
<li><a href="http://lldong.github.io/">lldong</a>(不详！)</li>
<li><a href="http://yingkong1987.github.io/">yingkong1987</a>(@兔be南玻1)</li>
<li><a href="http://blog.xcodev.com/">xcodev</a>(资深iOS开发工程师@谌启亮)</li>
<li><a href="http://www.isaced.com/">isaced</a>(iOS Programmer@isaced)</li>
<li><a href="http://answerhuang.duapp.com/">answerhuang</a>(iOS developer, Python fans@answer-huang)</li>
<li><a href="http://geeklu.com/">卢克</a>(Mac，iOS开发@卢小克)</li>
<li><a href="http://blog.csdn.net/ysy441088327">余书懿</a>(代表作:&lt;豆豆音乐> @余书懿)</li>
<li><a href="http://wangling.me/">Creator of moke</a>(Creator of 墨客(moke.com) and Voodo(moke.com/voodo)@an00na)</li>
<li><a href="http://iiiyu.com/">萧宸宇</a>(注定漂泊的人@Sumi-iYu)</li>
<li><a href="http://webfrogs.me/">webfrogs</a>(iOS开发，开源爱好者 @webfrogs)</li>
<li><a href="http://esoftmobile.com/">esoftmobile</a>(iOS开发者 esoftmobile.com @TracyYih)</li>
<li><a href="http://blog.leezhong.com/">无网不剩</a>(iOS开发@李忠)</li>
<li><a href="http://www.starfelix.com/">starfelix达叔</a>(不要告诉任何人你无法实现自己的梦想，包括我！@达叔是一种沧桑)</li>
<li><a href="http://www.tanhao.me/">老谭</a>(不详，但看博客内容很牛！)</li>
</ul>


<h2 id="periodical">期刊</h2>


<ul>
<li><p><a href="http://www.objc.io/">objc.io</a> &mdash;-中文版&mdash;&ndash;> <a href="http://www.objccn.io/">objccn.io</a></p></li>
<li><p><a href="http://nshipster.com/">nshipster.com</a> &mdash;-中文版&mdash;&ndash;> <a href="http://nshipster.cn/">nshipster.cn</a></p></li>
<li><p><a href="http://www.raywenderlich.com/">raywenderlich.com</a></p></li>
</ul>


<h1 id="else">其他</h1>




<h2 id="uidesign">UI设计</h2>




<h4 id="sketch">Sketch</h4>


<ul>
<li><p><a href="http://www.zcool.com.cn/article/ZODQ1ODA=.html">酷九合金社Sketch教程系列-IOS图标（上）</a> by C9D<br/></p></li>
<li><p><a href="http://www.zcool.com.cn/article/ZODQ1ODg=.html">酷九合金社Sketch教程系列-IOS图标（下）</a> by C9D<br/></p></li>
<li><p><a href="http://www.ui.cn/project.php?id=31346">奇葩的Sketch教程，专治各种疑难杂症</a> by JaminWoo<br/></p></li>
</ul>


<h2 id="markdown">Markdown</h2>


<ul>
<li><a href="http://wowubuntu.com/markdown/index.html">Markdown 语法说明 (简体中文版)</a><br/></li>
</ul>

]]></content>
  </entry>
  
</feed>
